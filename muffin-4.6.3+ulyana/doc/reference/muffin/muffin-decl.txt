<MACRO>
<NAME>META_TYPE_BACKGROUND</NAME>
#define META_TYPE_BACKGROUND            (meta_background_get_type ())
</MACRO>
<MACRO>
<NAME>META_BACKGROUND</NAME>
#define META_BACKGROUND(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_BACKGROUND, MetaBackground))
</MACRO>
<MACRO>
<NAME>META_BACKGROUND_CLASS</NAME>
#define META_BACKGROUND_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), META_TYPE_BACKGROUND, MetaBackgroundClass))
</MACRO>
<MACRO>
<NAME>META_IS_BACKGROUND</NAME>
#define META_IS_BACKGROUND(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_BACKGROUND))
</MACRO>
<MACRO>
<NAME>META_IS_BACKGROUND_CLASS</NAME>
#define META_IS_BACKGROUND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), META_TYPE_BACKGROUND))
</MACRO>
<MACRO>
<NAME>META_BACKGROUND_GET_CLASS</NAME>
#define META_BACKGROUND_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), META_TYPE_BACKGROUND, MetaBackgroundClass))
</MACRO>
<STRUCT>
<NAME>MetaBackgroundClass</NAME>
struct _MetaBackgroundClass
{
  ClutterActorClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>MetaBackground</NAME>
struct _MetaBackground
{
  ClutterActor parent;

  MetaBackgroundPrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>meta_background_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_background_new</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_background_set_layer</NAME>
<RETURNS>void</RETURNS>
MetaBackground       *self, CoglTexture          *texture
</FUNCTION>
<FUNCTION>
<NAME>meta_background_set_layer_wrap_mode</NAME>
<RETURNS>void</RETURNS>
MetaBackground       *self, CoglPipelineWrapMode  wrap_mode
</FUNCTION>
<FUNCTION>
<NAME>meta_background_set_visible_region</NAME>
<RETURNS>void</RETURNS>
MetaBackground       *self, cairo_region_t       *visible_region
</FUNCTION>
<STRUCT>
<NAME>MetaBackgroundPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>meta_shaped_texture_new</NAME>
<RETURNS>ClutterActor *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_set_texture</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex, CoglTexture       *texture
</FUNCTION>
<FUNCTION>
<NAME>meta_sync_ring_init</NAME>
<RETURNS>gboolean</RETURNS>
Display *dpy
</FUNCTION>
<FUNCTION>
<NAME>meta_sync_ring_destroy</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_sync_ring_after_frame</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_sync_ring_insert_wait</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_sync_ring_handle_event</NAME>
<RETURNS>void</RETURNS>
XEvent *event
</FUNCTION>
<FUNCTION>
<NAME>meta_set_verbose</NAME>
<RETURNS>void</RETURNS>
gboolean setting
</FUNCTION>
<FUNCTION>
<NAME>meta_set_debugging</NAME>
<RETURNS>void</RETURNS>
gboolean setting
</FUNCTION>
<FUNCTION>
<NAME>meta_set_syncing</NAME>
<RETURNS>void</RETURNS>
gboolean setting
</FUNCTION>
<FUNCTION>
<NAME>meta_set_replace_current_wm</NAME>
<RETURNS>void</RETURNS>
gboolean setting
</FUNCTION>
<MACRO>
<NAME>META_TYPE_RECTANGLE</NAME>
#define META_TYPE_RECTANGLE            (meta_rectangle_get_type ())
</MACRO>
<STRUCT>
<NAME>MetaRectangle</NAME>
struct _MetaRectangle
{
  int x;
  int y;
  int width;
  int height;
};
</STRUCT>
<STRUCT>
<NAME>MetaStrut</NAME>
struct _MetaStrut
{
  MetaRectangle rect;
  MetaSide side;
};
</STRUCT>
<ENUM>
<NAME>MetaEdgeType</NAME>
typedef enum
{
  META_EDGE_WINDOW,
  META_EDGE_MONITOR,
  META_EDGE_SCREEN
} MetaEdgeType;
</ENUM>
<STRUCT>
<NAME>MetaEdge</NAME>
struct _MetaEdge
{
  MetaRectangle rect;      /* width or height should be 1 */
  MetaSide side_type;
  MetaEdgeType  edge_type;
};
</STRUCT>
<FUNCTION>
<NAME>meta_rectangle_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_copy</NAME>
<RETURNS>MetaRectangle *</RETURNS>
const MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_free</NAME>
<RETURNS>void</RETURNS>
MetaRectangle       *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_rect</NAME>
<RETURNS>MetaRectangle</RETURNS>
int x, int y, int width, int height
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_area</NAME>
<RETURNS>int</RETURNS>
const MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_intersect</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *src1, const MetaRectangle *src2, MetaRectangle       *dest
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_equal</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *src1, const MetaRectangle *src2
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_union</NAME>
<RETURNS>void</RETURNS>
const MetaRectangle *rect1, const MetaRectangle *rect2, MetaRectangle       *dest
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_overlap</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *rect1, const MetaRectangle *rect2
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_vert_overlap</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *rect1, const MetaRectangle *rect2
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_horiz_overlap</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *rect1, const MetaRectangle *rect2
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_could_fit_rect</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *outer_rect, const MetaRectangle *inner_rect
</FUNCTION>
<FUNCTION>
<NAME>meta_rectangle_contains_rect</NAME>
<RETURNS>gboolean</RETURNS>
const MetaRectangle *outer_rect, const MetaRectangle *inner_rect
</FUNCTION>
<ENUM>
<NAME>MetaFrameFlags</NAME>
typedef enum
{
  META_FRAME_ALLOWS_DELETE            = 1 << 0,
  META_FRAME_ALLOWS_MENU              = 1 << 1,
  META_FRAME_ALLOWS_MINIMIZE          = 1 << 2,
  META_FRAME_ALLOWS_MAXIMIZE          = 1 << 3,
  META_FRAME_ALLOWS_LEFT_RESIZE       = 1 << 4,
  META_FRAME_ALLOWS_RIGHT_RESIZE      = 1 << 5,
  META_FRAME_ALLOWS_TOP_RESIZE        = 1 << 6,
  META_FRAME_ALLOWS_BOTTOM_RESIZE     = 1 << 7,
  META_FRAME_HAS_FOCUS                = 1 << 8,
  META_FRAME_SHADED                   = 1 << 9,
  META_FRAME_STUCK                    = 1 << 10,
  META_FRAME_MAXIMIZED                = 1 << 11,
  META_FRAME_ALLOWS_SHADE             = 1 << 12,
  META_FRAME_ALLOWS_MOVE              = 1 << 13,
  META_FRAME_FULLSCREEN               = 1 << 14,
  META_FRAME_IS_FLASHING              = 1 << 15,
  META_FRAME_ABOVE                    = 1 << 16,
  META_FRAME_TILED_LEFT               = 1 << 17,
  META_FRAME_TILED_RIGHT              = 1 << 18,
  META_FRAME_ALLOWS_VERTICAL_RESIZE   = (META_FRAME_ALLOWS_TOP_RESIZE | META_FRAME_ALLOWS_BOTTOM_RESIZE),
  META_FRAME_ALLOWS_HORIZONTAL_RESIZE = (META_FRAME_ALLOWS_LEFT_RESIZE | META_FRAME_ALLOWS_RIGHT_RESIZE)
} MetaFrameFlags;
</ENUM>
<ENUM>
<NAME>MetaMenuOp</NAME>
typedef enum
{
  META_MENU_OP_NONE        = 0,
  META_MENU_OP_DELETE      = 1 << 0,
  META_MENU_OP_MINIMIZE    = 1 << 1,
  META_MENU_OP_UNMAXIMIZE  = 1 << 2,
  META_MENU_OP_MAXIMIZE    = 1 << 3,
  META_MENU_OP_UNSHADE     = 1 << 4,
  META_MENU_OP_SHADE       = 1 << 5,
  META_MENU_OP_UNSTICK     = 1 << 6,
  META_MENU_OP_STICK       = 1 << 7,
  META_MENU_OP_WORKSPACES  = 1 << 8,
  META_MENU_OP_MOVE        = 1 << 9,
  META_MENU_OP_RESIZE      = 1 << 10,
  META_MENU_OP_ABOVE       = 1 << 11,
  META_MENU_OP_UNABOVE     = 1 << 12,
  META_MENU_OP_MOVE_LEFT   = 1 << 13,
  META_MENU_OP_MOVE_RIGHT  = 1 << 14,
  META_MENU_OP_MOVE_UP     = 1 << 15,
  META_MENU_OP_MOVE_DOWN   = 1 << 16,
  META_MENU_OP_RECOVER     = 1 << 17,
  META_MENU_OP_MOVE_NEW    = 1 << 18
} MetaMenuOp;
</ENUM>
<USER_FUNCTION>
<NAME>MetaWindowMenuFunc</NAME>
<RETURNS>void</RETURNS>
MetaWindowMenu *menu, Display        *xdisplay, Window          client_xwindow, guint32         timestamp, MetaMenuOp      op, int             workspace, gpointer        data
</USER_FUNCTION>
<ENUM>
<NAME>MetaGrabOp</NAME>
typedef enum
{
  META_GRAB_OP_NONE,

  /* Mouse ops */
  META_GRAB_OP_MOVING,
  META_GRAB_OP_RESIZING_SE,
  META_GRAB_OP_RESIZING_S,
  META_GRAB_OP_RESIZING_SW,
  META_GRAB_OP_RESIZING_N,
  META_GRAB_OP_RESIZING_NE,
  META_GRAB_OP_RESIZING_NW,
  META_GRAB_OP_RESIZING_W,
  META_GRAB_OP_RESIZING_E,

  /* Keyboard ops */
  META_GRAB_OP_KEYBOARD_MOVING,
  META_GRAB_OP_KEYBOARD_RESIZING_UNKNOWN,
  META_GRAB_OP_KEYBOARD_RESIZING_S,
  META_GRAB_OP_KEYBOARD_RESIZING_N,
  META_GRAB_OP_KEYBOARD_RESIZING_W,
  META_GRAB_OP_KEYBOARD_RESIZING_E,
  META_GRAB_OP_KEYBOARD_RESIZING_SE,
  META_GRAB_OP_KEYBOARD_RESIZING_NE,
  META_GRAB_OP_KEYBOARD_RESIZING_SW,
  META_GRAB_OP_KEYBOARD_RESIZING_NW,

  /* Alt+Tab */
  META_GRAB_OP_KEYBOARD_TABBING_NORMAL,
  META_GRAB_OP_KEYBOARD_TABBING_DOCK,

  /* Alt+Esc */
  META_GRAB_OP_KEYBOARD_ESCAPING_NORMAL,
  META_GRAB_OP_KEYBOARD_ESCAPING_DOCK,

  META_GRAB_OP_KEYBOARD_ESCAPING_GROUP,
  
  /* Alt+F6 */
  META_GRAB_OP_KEYBOARD_TABBING_GROUP,
  
  META_GRAB_OP_KEYBOARD_WORKSPACE_SWITCHING,
  
  /* Frame button ops */
  META_GRAB_OP_CLICKING_MINIMIZE,
  META_GRAB_OP_CLICKING_MAXIMIZE,
  META_GRAB_OP_CLICKING_UNMAXIMIZE,
  META_GRAB_OP_CLICKING_DELETE,
  META_GRAB_OP_CLICKING_MENU,
  META_GRAB_OP_CLICKING_SHADE,
  META_GRAB_OP_CLICKING_UNSHADE,
  META_GRAB_OP_CLICKING_ABOVE,
  META_GRAB_OP_CLICKING_UNABOVE,
  META_GRAB_OP_CLICKING_STICK,
  META_GRAB_OP_CLICKING_UNSTICK,

  /* Special grab op when the compositor asked for a grab */
  META_GRAB_OP_COMPOSITOR
} MetaGrabOp;
</ENUM>
<ENUM>
<NAME>MetaCursor</NAME>
typedef enum
{
  META_CURSOR_DEFAULT,
  META_CURSOR_NORTH_RESIZE,
  META_CURSOR_SOUTH_RESIZE,
  META_CURSOR_WEST_RESIZE,
  META_CURSOR_EAST_RESIZE,
  META_CURSOR_SE_RESIZE,
  META_CURSOR_SW_RESIZE,
  META_CURSOR_NE_RESIZE,
  META_CURSOR_NW_RESIZE,
  META_CURSOR_MOVE_OR_RESIZE_WINDOW,
  META_CURSOR_BUSY

} MetaCursor;
</ENUM>
<ENUM>
<NAME>MetaFrameType</NAME>
typedef enum
{
  META_FRAME_TYPE_NORMAL,
  META_FRAME_TYPE_DIALOG,
  META_FRAME_TYPE_MODAL_DIALOG,
  META_FRAME_TYPE_UTILITY,
  META_FRAME_TYPE_MENU,
  META_FRAME_TYPE_BORDER,
  META_FRAME_TYPE_ATTACHED,
  META_FRAME_TYPE_LAST
} MetaFrameType;
</ENUM>
<ENUM>
<NAME>MetaVirtualModifier</NAME>
typedef enum
{
  /* Create gratuitous divergence from regular
   * X mod bits, to be sure we find bugs
   */
  META_VIRTUAL_SHIFT_MASK    = 1 << 5,
  META_VIRTUAL_CONTROL_MASK  = 1 << 6,
  META_VIRTUAL_ALT_MASK      = 1 << 7,  
  META_VIRTUAL_META_MASK     = 1 << 8,
  META_VIRTUAL_SUPER_MASK    = 1 << 9,
  META_VIRTUAL_HYPER_MASK    = 1 << 10,
  META_VIRTUAL_MOD2_MASK     = 1 << 11,
  META_VIRTUAL_MOD3_MASK     = 1 << 12,
  META_VIRTUAL_MOD4_MASK     = 1 << 13,
  META_VIRTUAL_MOD5_MASK     = 1 << 14
} MetaVirtualModifier;
</ENUM>
<ENUM>
<NAME>MetaDirection</NAME>
typedef enum
{
  META_DIRECTION_LEFT       = 1 << 0,
  META_DIRECTION_RIGHT      = 1 << 1,
  META_DIRECTION_TOP        = 1 << 2,
  META_DIRECTION_BOTTOM     = 1 << 3,

  /* Some aliases for making code more readable for various circumstances. */
  META_DIRECTION_UP         = META_DIRECTION_TOP,
  META_DIRECTION_DOWN       = META_DIRECTION_BOTTOM,

  /* A few more definitions using aliases */
  META_DIRECTION_HORIZONTAL = META_DIRECTION_LEFT | META_DIRECTION_RIGHT,
  META_DIRECTION_VERTICAL   = META_DIRECTION_UP   | META_DIRECTION_DOWN,
} MetaDirection;
</ENUM>
<ENUM>
<NAME>MetaMotionDirection</NAME>
typedef enum
{
  META_MOTION_UP = -1,
  META_MOTION_DOWN = -2,
  META_MOTION_LEFT = -3,
  META_MOTION_RIGHT = -4,
  /* These are only used for effects */
  META_MOTION_UP_LEFT = -5,
  META_MOTION_UP_RIGHT = -6,
  META_MOTION_DOWN_LEFT = -7,
  META_MOTION_DOWN_RIGHT = -8,
  META_MOTION_NOT_EXIST_YET = -30
} MetaMotionDirection;
</ENUM>
<ENUM>
<NAME>MetaSide</NAME>
typedef enum
{
  META_SIDE_LEFT            = META_DIRECTION_LEFT,
  META_SIDE_RIGHT           = META_DIRECTION_RIGHT,
  META_SIDE_TOP             = META_DIRECTION_TOP,
  META_SIDE_BOTTOM          = META_DIRECTION_BOTTOM
} MetaSide;
</ENUM>
<ENUM>
<NAME>MetaButtonFunction</NAME>
typedef enum
{
  META_BUTTON_FUNCTION_MENU,
  META_BUTTON_FUNCTION_MINIMIZE,
  META_BUTTON_FUNCTION_MAXIMIZE,
  META_BUTTON_FUNCTION_CLOSE,
  META_BUTTON_FUNCTION_SHADE,
  META_BUTTON_FUNCTION_ABOVE,
  META_BUTTON_FUNCTION_STICK,
  META_BUTTON_FUNCTION_UNSHADE,
  META_BUTTON_FUNCTION_UNABOVE,
  META_BUTTON_FUNCTION_UNSTICK,
  META_BUTTON_FUNCTION_LAST
} MetaButtonFunction;
</ENUM>
<ENUM>
<NAME>MetaTileMode</NAME>
typedef enum {
  META_TILE_NONE,
  META_TILE_LEFT,
  META_TILE_RIGHT,
  META_TILE_ULC,
  META_TILE_LLC,
  META_TILE_URC,
  META_TILE_LRC,
  META_TILE_TOP,
  META_TILE_BOTTOM,
  META_TILE_MAXIMIZE
} MetaTileMode;
</ENUM>
<ENUM>
<NAME>MetaWindowTileType</NAME>
typedef enum {
    META_WINDOW_TILE_TYPE_NONE,
    META_WINDOW_TILE_TYPE_TILED,
    META_WINDOW_TILE_TYPE_SNAPPED
} MetaWindowTileType;
</ENUM>
<ENUM>
<NAME>MetaBellType</NAME>
typedef enum {
    META_BELL_TYPE_NONE,
    META_BELL_TYPE_STICKY_KEYS,
    META_BELL_TYPE_SLOW_KEYS,
    META_BELL_TYPE_BOUNCE_KEYS
} MetaBellType;
</ENUM>
<MACRO>
<NAME>MAX_BUTTONS_PER_CORNER</NAME>
#define MAX_BUTTONS_PER_CORNER META_BUTTON_FUNCTION_LAST
</MACRO>
<STRUCT>
<NAME>MetaButtonLayout</NAME>
struct _MetaButtonLayout
{
  /* buttons in the group on the left side */
  MetaButtonFunction left_buttons[MAX_BUTTONS_PER_CORNER];
  gboolean left_buttons_has_spacer[MAX_BUTTONS_PER_CORNER];

  /* buttons in the group on the right side */
  MetaButtonFunction right_buttons[MAX_BUTTONS_PER_CORNER];
  gboolean right_buttons_has_spacer[MAX_BUTTONS_PER_CORNER];
};
</STRUCT>
<STRUCT>
<NAME>MetaFrameBorders</NAME>
struct _MetaFrameBorders
{
  /* The frame border is made up of two pieces - an inner visible portion
   * and an outer portion that is invisible but responds to events.
   */
  GtkBorder visible;
  GtkBorder invisible;

  /* For convenience, we have a "total" border which is equal to the sum
   * of the two borders above. */
  GtkBorder total;
};
</STRUCT>
<FUNCTION>
<NAME>meta_frame_borders_clear</NAME>
<RETURNS>void</RETURNS>
MetaFrameBorders *self
</FUNCTION>
<MACRO>
<NAME>META_DEFAULT_ICON_NAME</NAME>
#define META_DEFAULT_ICON_NAME "window"
</MACRO>
<MACRO>
<NAME>META_PRIORITY_RESIZE</NAME>
#define META_PRIORITY_RESIZE    (G_PRIORITY_HIGH_IDLE + 15)
</MACRO>
<MACRO>
<NAME>META_PRIORITY_BEFORE_REDRAW</NAME>
#define META_PRIORITY_BEFORE_REDRAW  (G_PRIORITY_HIGH_IDLE + 40)
</MACRO>
<MACRO>
<NAME>META_PRIORITY_REDRAW</NAME>
#define META_PRIORITY_REDRAW    (G_PRIORITY_HIGH_IDLE + 50)
</MACRO>
<MACRO>
<NAME>META_PRIORITY_PREFS_NOTIFY</NAME>
#define META_PRIORITY_PREFS_NOTIFY   (G_PRIORITY_DEFAULT_IDLE + 10)
</MACRO>
<MACRO>
<NAME>META_POINT_IN_RECT</NAME>
#define META_POINT_IN_RECT(xcoord, ycoord, rect) \
 ((xcoord) >= (rect).x &&                   \
  (xcoord) <  ((rect).x + (rect).width) &&  \
  (ycoord) >= (rect).y &&                   \
  (ycoord) <  ((rect).y + (rect).height))
</MACRO>
<ENUM>
<NAME>MetaStackLayer</NAME>
typedef enum
{
  META_LAYER_DESKTOP	       = 0,
  META_LAYER_BOTTOM	       = 1,
  META_LAYER_NORMAL	       = 2,
  META_LAYER_TOP	       = 4, /* Same as DOCK; see EWMH and bug 330717 */
  META_LAYER_DOCK	       = 4,
  META_LAYER_FULLSCREEN	       = 5,
  META_LAYER_FOCUSED_WINDOW    = 6,
  META_LAYER_OVERRIDE_REDIRECT = 7,
  META_LAYER_LAST	       = 8
} MetaStackLayer;
</ENUM>
<ENUM>
<NAME>MetaPlacementMode</NAME>
typedef enum
{
  META_PLACEMENT_MODE_AUTOMATIC,
  META_PLACEMENT_MODE_POINTER,
  META_PLACEMENT_MODE_MANUAL,
  META_PLACEMENT_MODE_CENTER
} MetaPlacementMode;
</ENUM>
<ENUM>
<NAME>MetaBackgroundTransition</NAME>
typedef enum
{
  META_BACKGROUND_TRANSITION_NONE,
  META_BACKGROUND_TRANSITION_FADEIN,
  META_BACKGROUND_TRANSITION_BLEND
} MetaBackgroundTransition;
</ENUM>
<ENUM>
<NAME>MetaSyncMethod</NAME>
typedef enum
{
  META_SYNC_NONE = 0,
  META_SYNC_FALLBACK,
  META_SYNC_SWAP_THROTTLING,
  META_SYNC_PRESENTATION_TIME
} MetaSyncMethod;
</ENUM>
<STRUCT>
<NAME>MetaResizePopup</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaWindowMenu</NAME>
</STRUCT>
<FUNCTION>
<NAME>meta_get_stage_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_overlay_group_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_overlay_window</NAME>
<RETURNS>Window</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_window_actors</NAME>
<RETURNS>GList *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_window_group_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_bottom_window_group_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_top_window_group_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_disable_unredirect_for_screen</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_enable_unredirect_for_screen</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_get_background_actor_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_set_stage_input_region</NAME>
<RETURNS>void</RETURNS>
MetaScreen    *screen, XserverRegion  region
</FUNCTION>
<FUNCTION>
<NAME>meta_empty_stage_input_region</NAME>
<RETURNS>void</RETURNS>
MetaScreen    *screen
</FUNCTION>
<ENUM>
<NAME>MetaCompEffect</NAME>
typedef enum
{
  META_COMP_EFFECT_CREATE,
  META_COMP_EFFECT_UNMINIMIZE,
  META_COMP_EFFECT_DESTROY,
  META_COMP_EFFECT_MINIMIZE,
  META_COMP_EFFECT_NONE
} MetaCompEffect;
</ENUM>
<FUNCTION>
<NAME>meta_compositor_new</NAME>
<RETURNS>MetaCompositor *</RETURNS>
MetaDisplay    *display
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_destroy</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_manage_screen</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaScreen     *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_unmanage_screen</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaScreen     *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_window_shape_changed</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaWindow     *window
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_process_event</NAME>
<RETURNS>gboolean</RETURNS>
MetaCompositor *compositor, XEvent         *event, MetaWindow     *window
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_add_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaWindow     *window
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_remove_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaWindow     *window
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_show_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor      *compositor, MetaWindow          *window, MetaCompEffect       effect
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_hide_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor      *compositor, MetaWindow          *window, MetaCompEffect       effect
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_switch_workspace</NAME>
<RETURNS>void</RETURNS>
MetaCompositor      *compositor, MetaScreen          *screen, MetaWorkspace       *from, MetaWorkspace       *to, MetaMotionDirection  direction
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_maximize_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor      *compositor, MetaWindow          *window, MetaRectangle       *old_rect, MetaRectangle       *new_rect
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_unmaximize_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor      *compositor, MetaWindow          *window, MetaRectangle       *old_rect, MetaRectangle       *new_rect
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_sync_window_geometry</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaWindow     *window, gboolean        did_placement
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_set_updates_frozen</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaWindow     *window, gboolean        updates_frozen
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_queue_frame_drawn</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaWindow     *window, gboolean        no_delay_frame
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_sync_stack</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaScreen     *screen, GList          *stack
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_sync_screen_size</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaScreen     *screen, guint           width, guint           height
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_flash_screen</NAME>
<RETURNS>void</RETURNS>
MetaCompositor *compositor, MetaScreen     *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_tile_window</NAME>
<RETURNS>void</RETURNS>
MetaCompositor      *compositor, MetaWindow          *window, MetaRectangle       *old_rect, MetaRectangle       *new_rect
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_show_tile_preview</NAME>
<RETURNS>void</RETURNS>
MetaCompositor  *compositor, MetaScreen      *screen, MetaWindow      *window, MetaRectangle   *tile_rect, int             tile_monitor_number, guint           snap_queued
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_hide_tile_preview</NAME>
<RETURNS>void</RETURNS>
MetaCompositor  *compositor, MetaScreen      *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_show_hud_preview</NAME>
<RETURNS>void</RETURNS>
MetaCompositor   *compositor, MetaScreen       *screen, guint            current_proximity_zone, MetaRectangle    *work_area, guint            snap_queued
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_hide_hud_preview</NAME>
<RETURNS>void</RETURNS>
MetaCompositor   *compositor, MetaScreen       *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_toggle_send_frame_timings</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen
</FUNCTION>
<ENUM>
<NAME>MetaTabList</NAME>
typedef enum
{
  META_TAB_LIST_NORMAL,
  META_TAB_LIST_DOCKS,
  META_TAB_LIST_GROUP,
  META_TAB_LIST_NORMAL_ALL
} MetaTabList;
</ENUM>
<ENUM>
<NAME>MetaTabShowType</NAME>
typedef enum
{
  META_TAB_SHOW_ICON,      /* Alt-Tab mode */
  META_TAB_SHOW_INSTANTLY  /* Alt-Esc mode */
} MetaTabShowType;
</ENUM>
<MACRO>
<NAME>META_TYPE_DISPLAY</NAME>
#define META_TYPE_DISPLAY              (meta_display_get_type ())
</MACRO>
<MACRO>
<NAME>META_DISPLAY</NAME>
#define META_DISPLAY(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), META_TYPE_DISPLAY, MetaDisplay))
</MACRO>
<MACRO>
<NAME>META_DISPLAY_CLASS</NAME>
#define META_DISPLAY_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), META_TYPE_DISPLAY, MetaDisplayClass))
</MACRO>
<MACRO>
<NAME>META_IS_DISPLAY</NAME>
#define META_IS_DISPLAY(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), META_TYPE_DISPLAY))
</MACRO>
<MACRO>
<NAME>META_IS_DISPLAY_CLASS</NAME>
#define META_IS_DISPLAY_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), META_TYPE_DISPLAY))
</MACRO>
<MACRO>
<NAME>META_DISPLAY_GET_CLASS</NAME>
#define META_DISPLAY_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), META_TYPE_DISPLAY, MetaDisplayClass))
</MACRO>
<FUNCTION>
<NAME>meta_display_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>meta_XFree</NAME>
#define meta_XFree(p) do { if ((p)) XFree ((p)); } while (0)
</MACRO>
<ENUM>
<NAME>MetaListWindowsFlags</NAME>
typedef enum {
  META_LIST_DEFAULT                   = 0,      /* normal windows */
  META_LIST_INCLUDE_OVERRIDE_REDIRECT = 1 << 0, /* normal and O-R */
} MetaListWindowsFlags;
</ENUM>
<FUNCTION>
<NAME>meta_display_get_compositor_version</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display, int         *major, int         *minor
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_xdisplay</NAME>
<RETURNS>Display *</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_compositor</NAME>
<RETURNS>MetaCompositor *</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_screens</NAME>
<RETURNS>GSList *</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_has_shape</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_screen_for_root</NAME>
<RETURNS>MetaScreen *</RETURNS>
MetaDisplay *display, Window       xroot
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_focus_window</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_list_windows</NAME>
<RETURNS>GSList *</RETURNS>
MetaDisplay          *display, MetaListWindowsFlags  flags
</FUNCTION>
<FUNCTION>
<NAME>meta_display_xwindow_is_a_no_focus_window</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay *display, Window xwindow
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_damage_event_base</NAME>
<RETURNS>int</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_shape_event_base</NAME>
<RETURNS>int</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_xserver_time_is_before</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay *display, guint32      time1, guint32      time2
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_last_user_time</NAME>
<RETURNS>guint32</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_current_time</NAME>
<RETURNS>guint32</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_current_time_roundtrip</NAME>
<RETURNS>guint32</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_ignored_modifier_mask</NAME>
<RETURNS>unsigned int</RETURNS>
MetaDisplay  *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_tab_list</NAME>
<RETURNS>GList *</RETURNS>
MetaDisplay   *display, MetaTabList    type, MetaScreen    *screen, MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_tab_next</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaDisplay   *display, MetaTabList    type, MetaScreen    *screen, MetaWorkspace *workspace, MetaWindow    *window, gboolean       backward
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_tab_current</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaDisplay   *display, MetaTabList    type, MetaScreen    *screen, MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_display_begin_grab_op</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay *display, MetaScreen  *screen, MetaWindow  *window, MetaGrabOp   op, gboolean     pointer_already_grabbed, gboolean     frame_action, int          button, gulong       modmask, guint32      timestamp, int          root_x, int          root_y
</FUNCTION>
<FUNCTION>
<NAME>meta_display_end_grab_op</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display, guint32      timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_grab_op</NAME>
<RETURNS>MetaGrabOp</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_add_keybinding</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay         *display, const char          *name, const char          *schema, MetaKeyBindingFlags  flags, MetaKeyHandlerFunc   handler, gpointer             user_data, GDestroyNotify       free_data
</FUNCTION>
<FUNCTION>
<NAME>meta_display_remove_keybinding</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay         *display, const char          *name
</FUNCTION>
<FUNCTION>
<NAME>meta_display_rebuild_keybindings</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_add_custom_keybinding</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay         *display, const char          *name, const char         **bindings, MetaKeyHandlerFunc   callback, gpointer             user_data, GDestroyNotify       free_data
</FUNCTION>
<FUNCTION>
<NAME>meta_display_remove_custom_keybinding</NAME>
<RETURNS>gboolean</RETURNS>
MetaDisplay         *display, const char          *name
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_keybinding_action</NAME>
<RETURNS>MetaKeyBindingAction</RETURNS>
MetaDisplay  *display, unsigned int  keycode, unsigned long mask
</FUNCTION>
<FUNCTION>
<NAME>meta_display_set_input_focus_window</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display, MetaWindow  *window, gboolean     focus_frame, guint32      timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_display_focus_the_no_focus_window</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display, MetaScreen  *screen, guint32      timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_display_sort_windows_by_stacking</NAME>
<RETURNS>GSList *</RETURNS>
MetaDisplay *display, GSList      *windows
</FUNCTION>
<FUNCTION>
<NAME>meta_display_get_leader_window</NAME>
<RETURNS>Window</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_display_add_ignored_crossing_serial</NAME>
<RETURNS>void</RETURNS>
MetaDisplay  *display, unsigned long serial
</FUNCTION>
<FUNCTION>
<NAME>meta_display_unmanage_screen</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display, MetaScreen  *screen, guint32      timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_display_keybinding_action_invoke_by_code</NAME>
<RETURNS>void</RETURNS>
MetaDisplay  *display, unsigned int  keycode, unsigned long mask
</FUNCTION>
<FUNCTION>
<NAME>meta_display_restart</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display
</FUNCTION>
<STRUCT>
<NAME>MetaDisplayClass</NAME>
</STRUCT>
<FUNCTION>
<NAME>meta_error_trap_push</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_error_trap_pop</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_error_trap_push_with_return</NAME>
<RETURNS>void</RETURNS>
MetaDisplay *display
</FUNCTION>
<FUNCTION>
<NAME>meta_error_trap_pop_with_return</NAME>
<RETURNS>int</RETURNS>
MetaDisplay *display
</FUNCTION>
<ENUM>
<NAME>MetaGradientType</NAME>
typedef enum
{
  META_GRADIENT_VERTICAL,
  META_GRADIENT_HORIZONTAL,
  META_GRADIENT_DIAGONAL,
  META_GRADIENT_LAST
} MetaGradientType;
</ENUM>
<FUNCTION>
<NAME>meta_gradient_create_simple</NAME>
<RETURNS>GdkPixbuf *</RETURNS>
int               width, int               height, const GdkRGBA    *from, const GdkRGBA    *to, MetaGradientType  style
</FUNCTION>
<FUNCTION>
<NAME>meta_gradient_create_multi</NAME>
<RETURNS>GdkPixbuf *</RETURNS>
int               width, int               height, const GdkRGBA    *colors, int               n_colors, MetaGradientType  style
</FUNCTION>
<FUNCTION>
<NAME>meta_gradient_create_interwoven</NAME>
<RETURNS>GdkPixbuf *</RETURNS>
int               width, int               height, const GdkRGBA     colors1[2], int               thickness1, const GdkRGBA     colors2[2], int               thickness2
</FUNCTION>
<FUNCTION>
<NAME>meta_gradient_add_alpha</NAME>
<RETURNS>void</RETURNS>
GdkPixbuf       *pixbuf, const guchar    *alphas, int              n_alphas, MetaGradientType type
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_group</NAME>
<RETURNS>MetaGroup *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_compute_group</NAME>
<RETURNS>void</RETURNS>
MetaWindow* window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_shutdown_group</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_group_leader_changed</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_display_lookup_group</NAME>
<RETURNS>MetaGroup *</RETURNS>
MetaDisplay *display, Window       group_leader
</FUNCTION>
<FUNCTION>
<NAME>meta_group_list_windows</NAME>
<RETURNS>GSList *</RETURNS>
MetaGroup *group
</FUNCTION>
<FUNCTION>
<NAME>meta_group_update_layers</NAME>
<RETURNS>void</RETURNS>
MetaGroup *group
</FUNCTION>
<FUNCTION>
<NAME>meta_group_get_startup_id</NAME>
<RETURNS>const char *</RETURNS>
MetaGroup *group
</FUNCTION>
<FUNCTION>
<NAME>meta_group_get_size</NAME>
<RETURNS>int</RETURNS>
MetaGroup *group
</FUNCTION>
<FUNCTION>
<NAME>meta_group_property_notify</NAME>
<RETURNS>gboolean</RETURNS>
MetaGroup  *group, XEvent     *event
</FUNCTION>
<MACRO>
<NAME>META_TYPE_KEY_BINDING</NAME>
#define META_TYPE_KEY_BINDING               (meta_key_binding_get_type ())
</MACRO>
<FUNCTION>
<NAME>meta_key_binding_get_name</NAME>
<RETURNS>const char *</RETURNS>
MetaKeyBinding *binding
</FUNCTION>
<FUNCTION>
<NAME>meta_key_binding_get_modifiers</NAME>
<RETURNS>MetaVirtualModifier</RETURNS>
MetaKeyBinding *binding
</FUNCTION>
<FUNCTION>
<NAME>meta_key_binding_get_mask</NAME>
<RETURNS>guint</RETURNS>
MetaKeyBinding *binding
</FUNCTION>
<FUNCTION>
<NAME>meta_keybindings_set_custom_handler</NAME>
<RETURNS>gboolean</RETURNS>
const gchar        *name, MetaKeyHandlerFunc  handler, gpointer            user_data, GDestroyNotify      free_data
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_ungrab_all_keys</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen, guint32 timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_grab_all_keys</NAME>
<RETURNS>gboolean</RETURNS>
MetaScreen *screen, guint32 timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_get_option_context</NAME>
<RETURNS>GOptionContext *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_run</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_get_replace_current_wm</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_set_wm_name</NAME>
<RETURNS>void</RETURNS>
const char *wm_name
</FUNCTION>
<FUNCTION>
<NAME>meta_set_gnome_wm_keybindings</NAME>
<RETURNS>void</RETURNS>
const char *wm_keybindings
</FUNCTION>
<FUNCTION>
<NAME>meta_restart</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>MetaExitCode</NAME>
typedef enum
{
  META_EXIT_SUCCESS,
  META_EXIT_ERROR
} MetaExitCode;
</ENUM>
<FUNCTION>
<NAME>meta_exit</NAME>
<RETURNS>void</RETURNS>
MetaExitCode code
</FUNCTION>
<FUNCTION>
<NAME>meta_quit</NAME>
<RETURNS>void</RETURNS>
MetaExitCode code
</FUNCTION>
<MACRO>
<NAME>META_TYPE_BACKGROUND_ACTOR</NAME>
#define META_TYPE_BACKGROUND_ACTOR            (meta_background_actor_get_type ())
</MACRO>
<MACRO>
<NAME>META_BACKGROUND_ACTOR</NAME>
#define META_BACKGROUND_ACTOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_BACKGROUND_ACTOR, MetaBackgroundActor))
</MACRO>
<MACRO>
<NAME>META_BACKGROUND_ACTOR_CLASS</NAME>
#define META_BACKGROUND_ACTOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), META_TYPE_BACKGROUND_ACTOR, MetaBackgroundActorClass))
</MACRO>
<MACRO>
<NAME>META_IS_BACKGROUND_ACTOR</NAME>
#define META_IS_BACKGROUND_ACTOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_BACKGROUND_ACTOR))
</MACRO>
<MACRO>
<NAME>META_IS_BACKGROUND_ACTOR_CLASS</NAME>
#define META_IS_BACKGROUND_ACTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), META_TYPE_BACKGROUND_ACTOR))
</MACRO>
<MACRO>
<NAME>META_BACKGROUND_ACTOR_GET_CLASS</NAME>
#define META_BACKGROUND_ACTOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), META_TYPE_BACKGROUND_ACTOR, MetaBackgroundActorClass))
</MACRO>
<STRUCT>
<NAME>MetaBackgroundActorClass</NAME>
struct _MetaBackgroundActorClass
{
  ClutterActorClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>MetaBackgroundActor</NAME>
struct _MetaBackgroundActor
{
  ClutterActor parent;

  MetaBackgroundActorPrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>meta_background_actor_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_background_actor_new_for_screen</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaScreen *screen
</FUNCTION>
<STRUCT>
<NAME>MetaBackgroundActorPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>META_TYPE_PLUGIN</NAME>
#define META_TYPE_PLUGIN            (meta_plugin_get_type ())
</MACRO>
<MACRO>
<NAME>META_PLUGIN</NAME>
#define META_PLUGIN(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_PLUGIN, MetaPlugin))
</MACRO>
<MACRO>
<NAME>META_PLUGIN_CLASS</NAME>
#define META_PLUGIN_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  META_TYPE_PLUGIN, MetaPluginClass))
</MACRO>
<MACRO>
<NAME>META_IS_PLUGIN</NAME>
#define META_IS_PLUGIN(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_PLUGIN))
</MACRO>
<MACRO>
<NAME>META_IS_PLUGIN_CLASS</NAME>
#define META_IS_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  META_TYPE_PLUGIN))
</MACRO>
<MACRO>
<NAME>META_PLUGIN_GET_CLASS</NAME>
#define META_PLUGIN_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  META_TYPE_PLUGIN, MetaPluginClass))
</MACRO>
<STRUCT>
<NAME>MetaPlugin</NAME>
struct _MetaPlugin
{
  GObject parent;

  MetaPluginPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>MetaPluginClass</NAME>
struct _MetaPluginClass
{
  GObjectClass parent_class;

  void (*start)            (MetaPlugin         *plugin);

  void (*minimize)         (MetaPlugin         *plugin,
                            MetaWindowActor    *actor);

  void (*maximize)         (MetaPlugin         *plugin,
                            MetaWindowActor    *actor,
                            gint                x,
                            gint                y,
                            gint                width,
                            gint                height);

  void (*unmaximize)       (MetaPlugin         *plugin,
                            MetaWindowActor    *actor,
                            gint                x,
                            gint                y,
                            gint                width,
                            gint                height);

  void (*tile)             (MetaPlugin         *plugin,
                            MetaWindowActor    *actor,
                            gint                x,
                            gint                y,
                            gint                width,
                            gint                height);

  void (*map)              (MetaPlugin         *plugin,
                            MetaWindowActor    *actor);

  void (*destroy)          (MetaPlugin         *plugin,
                            MetaWindowActor    *actor);

  void (*switch_workspace) (MetaPlugin         *plugin,
                            gint                from,
                            gint                to,
                            MetaMotionDirection direction);

  void (*show_tile_preview) (MetaPlugin         *plugin,
                             MetaWindow         *window,
                             MetaRectangle      *tile_rect,
                             int                tile_monitor_number,
                             guint              snap_queued);

  void (*hide_tile_preview) (MetaPlugin         *plugin);

  void (*show_hud_preview) (MetaPlugin          *plugin,
                            guint               current_proximity_zone,
                            MetaRectangle       *work_area,
                            guint               snap_queued);

  void (*hide_hud_preview) (MetaPlugin         *plugin);

  /*
   * Called if an effects should be killed prematurely; the plugin must
   * call the completed() callback as if the effect terminated naturally.
   */
  void (*kill_window_effects)      (MetaPlugin      *plugin,
                                    MetaWindowActor *actor);

  /* General XEvent filter. This is fired *before* meta itself handles
   * an event. Return TRUE to block any further processing.
   */
  gboolean (*xevent_filter) (MetaPlugin       *plugin,
                             XEvent           *event);

  const MetaPluginInfo * (*plugin_info) (MetaPlugin *plugin);
};
</STRUCT>
<STRUCT>
<NAME>MetaPluginInfo</NAME>
struct _MetaPluginInfo
{
  const gchar *name;
  const gchar *version;
  const gchar *author;
  const gchar *license;
  const gchar *description;
};
</STRUCT>
<FUNCTION>
<NAME>meta_plugin_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_running</NAME>
<RETURNS>gboolean</RETURNS>
MetaPlugin *plugin
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_debug_mode</NAME>
<RETURNS>gboolean</RETURNS>
MetaPlugin *plugin
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_get_info</NAME>
<RETURNS>const MetaPluginInfo *</RETURNS>
MetaPlugin *plugin
</FUNCTION>
<STRUCT>
<NAME>MetaPluginVersion</NAME>
struct _MetaPluginVersion
{
  /*
   * Version information; the first three numbers match the Meta version
   * with which the plugin was compiled (see clutter-plugins/simple.c for sample
   * code).
   */
  guint version_major;
  guint version_minor;
  guint version_micro;

  /*
   * Version of the plugin API; this is unrelated to the matacity version
   * per se. The API version is checked by the plugin manager and must match
   * the one used by it (see clutter-plugins/default.c for sample code).
   */
  guint version_api;
};
</STRUCT>
<MACRO>
<NAME>META_PLUGIN_DECLARE</NAME>
#define META_PLUGIN_DECLARE(ObjectName, object_name)                    \
  G_MODULE_EXPORT MetaPluginVersion meta_plugin_version =               \
    {                                                                   \
      MUFFIN_MAJOR_VERSION,                                             \
      MUFFIN_MINOR_VERSION,                                             \
      MUFFIN_MICRO_VERSION,                                             \
      MUFFIN_PLUGIN_API_VERSION                                         \
    };                                                                  \
                                                                        \
  static GType g_define_type_id = 0;                                    \
                                                                        \
  /* Prototypes */                                                      \
  G_MODULE_EXPORT                                                       \
  GType object_name##_get_type (void);                                  \
                                                                        \
  G_MODULE_EXPORT                                                       \
  GType object_name##_register_type (GTypeModule *type_module);         \
                                                                        \
  G_MODULE_EXPORT                                                       \
  GType meta_plugin_register_type (GTypeModule *type_module);           \
                                                                        \
  GType                                                                 \
  object_name##_get_type ()                                             \
  {                                                                     \
    return g_define_type_id;                                            \
  }                                                                     \
                                                                        \
  static void object_name##_init (ObjectName *self);                    \
  static void object_name##_class_init (ObjectName##Class *klass);      \
  static gpointer object_name##_parent_class = NULL;                    \
  static void object_name##_class_intern_init (gpointer klass)          \
  {                                                                     \
    object_name##_parent_class = g_type_class_peek_parent (klass);      \
    object_name##_class_init ((ObjectName##Class *) klass);             \
  }                                                                     \
                                                                        \
  GType                                                                 \
  object_name##_register_type (GTypeModule *type_module)                \
  {                                                                     \
    static const GTypeInfo our_info =                                   \
      {                                                                 \
        sizeof (ObjectName##Class),                                     \
        NULL, /* base_init */                                           \
        NULL, /* base_finalize */                                       \
        (GClassInitFunc) object_name##_class_intern_init,               \
        NULL,                                                           \
        NULL, /* class_data */                                          \
        sizeof (ObjectName),                                            \
        0, /* n_preallocs */                                            \
        (GInstanceInitFunc) object_name##_init                          \
      };                                                                \
                                                                        \
    g_define_type_id = g_type_module_register_type (type_module,        \
                                                    META_TYPE_PLUGIN,   \
                                                    #ObjectName,        \
                                                    &our_info,          \
                                                    0);                 \
                                                                        \
                                                                        \
    return g_define_type_id;                                            \
  }                                                                     \
                                                                        \
  G_MODULE_EXPORT GType                                                 \
  meta_plugin_register_type (GTypeModule *type_module)                  \
  {                                                                     \
    return object_name##_register_type (type_module);                   \
  }                                                                     \

void
</MACRO>
<FUNCTION>
<NAME>meta_plugin_switch_workspace_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin *plugin
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_minimize_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin      *plugin, MetaWindowActor *actor
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_maximize_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin      *plugin, MetaWindowActor *actor
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_unmaximize_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin      *plugin, MetaWindowActor *actor
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_tile_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin      *plugin, MetaWindowActor *actor
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_map_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin      *plugin, MetaWindowActor *actor
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_destroy_completed</NAME>
<RETURNS>void</RETURNS>
MetaPlugin      *plugin, MetaWindowActor *actor
</FUNCTION>
<ENUM>
<NAME>MetaModalOptions</NAME>
typedef enum {
  META_MODAL_POINTER_ALREADY_GRABBED = 1 << 0,
  META_MODAL_KEYBOARD_ALREADY_GRABBED = 1 << 1
} MetaModalOptions;
</ENUM>
<FUNCTION>
<NAME>meta_plugin_begin_modal</NAME>
<RETURNS>gboolean</RETURNS>
MetaPlugin      *plugin, Window           grab_window, Cursor           cursor, MetaModalOptions options, guint32          timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_end_modal</NAME>
<RETURNS>void</RETURNS>
MetaPlugin *plugin, guint32     timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_get_screen</NAME>
<RETURNS>MetaScreen *</RETURNS>
MetaPlugin *plugin
</FUNCTION>
<FUNCTION>
<NAME>meta_plugin_manager_set_plugin_type</NAME>
<RETURNS>void</RETURNS>
GType gtype
</FUNCTION>
<STRUCT>
<NAME>MetaPluginPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaShadowParams</NAME>
struct _MetaShadowParams
{
  int radius;
  int top_fade;
  int x_offset;
  int y_offset;
  guint8 opacity;
};
</STRUCT>
<MACRO>
<NAME>META_TYPE_SHADOW_FACTORY</NAME>
#define META_TYPE_SHADOW_FACTORY            (meta_shadow_factory_get_type ())
</MACRO>
<MACRO>
<NAME>META_SHADOW_FACTORY</NAME>
#define META_SHADOW_FACTORY(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_SHADOW_FACTORY, MetaShadowFactory))
</MACRO>
<MACRO>
<NAME>META_SHADOW_FACTORY_CLASS</NAME>
#define META_SHADOW_FACTORY_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  META_TYPE_SHADOW_FACTORY, MetaShadowFactoryClass))
</MACRO>
<MACRO>
<NAME>META_IS_SHADOW_FACTORY</NAME>
#define META_IS_SHADOW_FACTORY(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_SHADOW_FACTORY))
</MACRO>
<MACRO>
<NAME>META_IS_SHADOW_FACTORY_CLASS</NAME>
#define META_IS_SHADOW_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  META_TYPE_SHADOW_FACTORY))
</MACRO>
<MACRO>
<NAME>META_SHADOW_FACTORY_GET_CLASS</NAME>
#define META_SHADOW_FACTORY_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  META_TYPE_SHADOW_FACTORY, MetaShadowFactoryClass))
</MACRO>
<FUNCTION>
<NAME>meta_shadow_factory_get_default</NAME>
<RETURNS>MetaShadowFactory *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_shadow_factory_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_shadow_factory_set_params</NAME>
<RETURNS>void</RETURNS>
MetaShadowFactory *factory, const char        *class_name, gboolean           focused, MetaShadowParams  *params
</FUNCTION>
<FUNCTION>
<NAME>meta_shadow_factory_get_params</NAME>
<RETURNS>void</RETURNS>
MetaShadowFactory *factory, const char        *class_name, gboolean           focused, MetaShadowParams  *params
</FUNCTION>
<FUNCTION>
<NAME>meta_compositor_on_shadow_factory_changed</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>MetaShadowFactory</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaShadowFactoryClass</NAME>
</STRUCT>
<MACRO>
<NAME>META_TYPE_SHAPED_TEXTURE</NAME>
#define META_TYPE_SHAPED_TEXTURE            (meta_shaped_texture_get_type())
</MACRO>
<MACRO>
<NAME>META_SHAPED_TEXTURE</NAME>
#define META_SHAPED_TEXTURE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj),META_TYPE_SHAPED_TEXTURE, MetaShapedTexture))
</MACRO>
<MACRO>
<NAME>META_SHAPED_TEXTURE_CLASS</NAME>
#define META_SHAPED_TEXTURE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), META_TYPE_SHAPED_TEXTURE, MetaShapedTextureClass))
</MACRO>
<MACRO>
<NAME>META_IS_SHAPED_TEXTURE</NAME>
#define META_IS_SHAPED_TEXTURE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_SHAPED_TEXTURE))
</MACRO>
<MACRO>
<NAME>META_IS_SHAPED_TEXTURE_CLASS</NAME>
#define META_IS_SHAPED_TEXTURE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), META_TYPE_SHAPED_TEXTURE))
</MACRO>
<MACRO>
<NAME>META_SHAPED_TEXTURE_GET_CLASS</NAME>
#define META_SHAPED_TEXTURE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), META_TYPE_SHAPED_TEXTURE, MetaShapedTextureClass))
</MACRO>
<STRUCT>
<NAME>MetaShapedTextureClass</NAME>
struct _MetaShapedTextureClass
{
  ClutterActorClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>MetaShapedTexture</NAME>
struct _MetaShapedTexture
{
  ClutterActor parent;

  MetaShapedTexturePrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>meta_shaped_texture_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_set_create_mipmaps</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex, gboolean           create_mipmaps
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_update_area</NAME>
<RETURNS>gboolean</RETURNS>
MetaShapedTexture *stex, int                x, int                y, int                width, int                height, cairo_region_t    *unobscured_region
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_get_texture</NAME>
<RETURNS>CoglTexture *</RETURNS>
MetaShapedTexture *stex
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_set_overlay_path</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex, cairo_region_t    *overlay_region, cairo_path_t      *overlay_path
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_set_clip_region</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex, cairo_region_t    *clip_region
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_set_opaque_region</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex, cairo_region_t    *opaque_region
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_get_image</NAME>
<RETURNS>cairo_surface_t *</RETURNS>
MetaShapedTexture     *stex, cairo_rectangle_int_t *clip
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_ensure_mask</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex, cairo_region_t    *shape_region, gboolean           has_frame
</FUNCTION>
<FUNCTION>
<NAME>meta_shaped_texture_dirty_mask</NAME>
<RETURNS>void</RETURNS>
MetaShapedTexture *stex
</FUNCTION>
<STRUCT>
<NAME>MetaShapedTexturePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>META_TYPE_WINDOW_ACTOR</NAME>
#define META_TYPE_WINDOW_ACTOR            (meta_window_actor_get_type ())
</MACRO>
<MACRO>
<NAME>META_WINDOW_ACTOR</NAME>
#define META_WINDOW_ACTOR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_WINDOW_ACTOR, MetaWindowActor))
</MACRO>
<MACRO>
<NAME>META_WINDOW_ACTOR_CLASS</NAME>
#define META_WINDOW_ACTOR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), META_TYPE_WINDOW_ACTOR, MetaWindowActorClass))
</MACRO>
<MACRO>
<NAME>META_IS_WINDOW_ACTOR</NAME>
#define META_IS_WINDOW_ACTOR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_WINDOW_ACTOR))
</MACRO>
<MACRO>
<NAME>META_IS_WINDOW_ACTOR_CLASS</NAME>
#define META_IS_WINDOW_ACTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), META_TYPE_WINDOW_ACTOR))
</MACRO>
<MACRO>
<NAME>META_WINDOW_ACTOR_GET_CLASS</NAME>
#define META_WINDOW_ACTOR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), META_TYPE_WINDOW_ACTOR, MetaWindowActorClass))
</MACRO>
<STRUCT>
<NAME>MetaWindowActorClass</NAME>
struct _MetaWindowActorClass
{
  ClutterActorClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>MetaWindowActor</NAME>
struct _MetaWindowActor
{
  ClutterActor           parent;

  MetaWindowActorPrivate *priv;
};
</STRUCT>
<FUNCTION>
<NAME>meta_window_actor_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_get_x_window</NAME>
<RETURNS>Window</RETURNS>
MetaWindowActor *self
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_get_workspace</NAME>
<RETURNS>gint</RETURNS>
MetaWindowActor *self
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_get_meta_window</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaWindowActor *self
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_get_texture</NAME>
<RETURNS>ClutterActor *</RETURNS>
MetaWindowActor *self
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_is_override_redirect</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindowActor *self
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_showing_on_its_workspace</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindowActor *self
</FUNCTION>
<FUNCTION>
<NAME>meta_window_actor_is_destroyed</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindowActor *self
</FUNCTION>
<STRUCT>
<NAME>MetaWindowActorPrivate</NAME>
</STRUCT>
<ENUM>
<NAME>MetaPreference</NAME>
typedef enum
{
  META_PREF_MOUSE_BUTTON_MODS,
  META_PREF_FOCUS_MODE,
  META_PREF_FOCUS_NEW_WINDOWS,
  META_PREF_ATTACH_MODAL_DIALOGS,
  META_PREF_IGNORE_HIDE_TITLEBAR_WHEN_MAXIMIZED,
  META_PREF_RAISE_ON_CLICK,
  META_PREF_ACTION_DOUBLE_CLICK_TITLEBAR,
  META_PREF_ACTION_MIDDLE_CLICK_TITLEBAR,
  META_PREF_ACTION_RIGHT_CLICK_TITLEBAR,
  META_PREF_ACTION_SCROLL_WHEEL_TITLEBAR,
  META_PREF_AUTO_RAISE,
  META_PREF_AUTO_RAISE_DELAY,
  META_PREF_THEME,
  META_PREF_TITLEBAR_FONT,
  META_PREF_NUM_WORKSPACES,
  META_PREF_DYNAMIC_WORKSPACES,
  META_PREF_UNREDIRECT_FULLSCREEN_WINDOWS,
  META_PREF_DESKTOP_EFFECTS,
  META_PREF_SYNC_METHOD,
  META_PREF_THREADED_SWAP,
  META_PREF_SEND_FRAME_TIMINGS,
  META_PREF_APPLICATION_BASED,
  META_PREF_KEYBINDINGS,
  META_PREF_DISABLE_WORKAROUNDS,
  META_PREF_BUTTON_LAYOUT,
  META_PREF_WORKSPACE_NAMES,
  META_PREF_WORKSPACE_CYCLE,
  META_PREF_VISUAL_BELL,
  META_PREF_AUDIBLE_BELL,
  META_PREF_VISUAL_BELL_TYPE,
  META_PREF_GNOME_ANIMATIONS,
  META_PREF_CURSOR_THEME,
  META_PREF_CURSOR_SIZE,
  META_PREF_RESIZE_WITH_RIGHT_BUTTON,
  META_PREF_EDGE_TILING,
  META_PREF_FORCE_FULLSCREEN,
  META_PREF_EDGE_RESISTANCE_WINDOW,
  META_PREF_WORKSPACES_ONLY_ON_PRIMARY,
  META_PREF_DRAGGABLE_BORDER_WIDTH,
  META_PREF_TILE_HUD_THRESHOLD,
  META_PREF_RESIZE_THRESHOLD,
  META_PREF_SNAP_MODIFIER,
  META_PREF_LEGACY_SNAP,
  META_PREF_INVERT_WORKSPACE_FLIP_DIRECTION,
  META_PREF_TILE_MAXIMIZE,
  META_PREF_PLACEMENT_MODE,
  META_PREF_BACKGROUND_TRANSITION,
  META_PREF_MIN_WIN_OPACITY,
  META_PREF_MOUSE_ZOOM_ENABLED,
  META_PREF_MOUSE_BUTTON_ZOOM_MODS,
  META_PREF_UI_SCALE
} MetaPreference;
</ENUM>
<USER_FUNCTION>
<NAME>MetaPrefsChangedFunc</NAME>
<RETURNS>void</RETURNS>
MetaPreference pref, gpointer       data
</USER_FUNCTION>
<FUNCTION>
<NAME>meta_prefs_add_listener</NAME>
<RETURNS>void</RETURNS>
MetaPrefsChangedFunc func, gpointer             data
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_remove_listener</NAME>
<RETURNS>void</RETURNS>
MetaPrefsChangedFunc func, gpointer             data
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_init</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_override_preference_schema</NAME>
<RETURNS>void</RETURNS>
const char *key, const char *schema
</FUNCTION>
<FUNCTION>
<NAME>meta_preference_to_string</NAME>
<RETURNS>const char *</RETURNS>
MetaPreference pref
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_mouse_button_mods</NAME>
<RETURNS>MetaVirtualModifier</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_mouse_button_zoom_mods</NAME>
<RETURNS>MetaVirtualModifier</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_mouse_zoom_enabled</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_mouse_button_resize</NAME>
<RETURNS>guint</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_mouse_button_menu</NAME>
<RETURNS>guint</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_focus_mode</NAME>
<RETURNS>CDesktopFocusMode</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_focus_new_windows</NAME>
<RETURNS>CDesktopFocusNewWindows</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_attach_modal_dialogs</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_ignore_hide_titlebar_when_maximized</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_raise_on_click</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_theme</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_titlebar_font</NAME>
<RETURNS>const PangoFontDescription *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_num_workspaces</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_workspace_cycle</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_dynamic_workspaces</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_unredirect_fullscreen_windows</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_sync_method</NAME>
<RETURNS>MetaSyncMethod</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_threaded_swap</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_send_frame_timings</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_application_based</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_disable_workarounds</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_auto_raise</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_auto_raise_delay</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_gnome_accessibility</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_gnome_animations</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_edge_tiling</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_edge_resistance_window</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_screenshot_command</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_window_screenshot_command</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_terminal_command</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_button_layout</NAME>
<RETURNS>void</RETURNS>
MetaButtonLayout *button_layout_p
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_action_double_click_titlebar</NAME>
<RETURNS>CDesktopTitlebarAction</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_action_middle_click_titlebar</NAME>
<RETURNS>CDesktopTitlebarAction</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_action_right_click_titlebar</NAME>
<RETURNS>CDesktopTitlebarAction</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_action_scroll_wheel_titlebar</NAME>
<RETURNS>CDesktopTitlebarScrollAction</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_set_num_workspaces</NAME>
<RETURNS>void</RETURNS>
int n_workspaces
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_workspace_name</NAME>
<RETURNS>const char *</RETURNS>
int         i
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_change_workspace_name</NAME>
<RETURNS>void</RETURNS>
int         i, const char *name
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_cursor_theme</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_cursor_size</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_compositing_manager</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_force_fullscreen</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_set_compositing_manager</NAME>
<RETURNS>void</RETURNS>
gboolean whether
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_set_force_fullscreen</NAME>
<RETURNS>void</RETURNS>
gboolean whether
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_workspaces_only_on_primary</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_draggable_border_width</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_tile_hud_threshold</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_resize_threshold</NAME>
<RETURNS>int</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_snap_modifier</NAME>
<RETURNS>unsigned int *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_legacy_snap</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_invert_flip_direction</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_tile_maximize</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_min_win_opacity</NAME>
<RETURNS>gint</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_ui_scale</NAME>
<RETURNS>gint</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_set_ui_scale</NAME>
<RETURNS>void</RETURNS>
int ui_scale
</FUNCTION>
<ENUM>
<NAME>MetaKeyBindingAction</NAME>
typedef enum _MetaKeyBindingAction
{
  META_KEYBINDING_ACTION_NONE = -1,
  /* WARNING: Watch keybindings.c 'process_event' if you change these enums */
  META_KEYBINDING_ACTION_WORKSPACE_1,
  META_KEYBINDING_ACTION_WORKSPACE_2,
  META_KEYBINDING_ACTION_WORKSPACE_3,
  META_KEYBINDING_ACTION_WORKSPACE_4,
  META_KEYBINDING_ACTION_WORKSPACE_5,
  META_KEYBINDING_ACTION_WORKSPACE_6,
  META_KEYBINDING_ACTION_WORKSPACE_7,
  META_KEYBINDING_ACTION_WORKSPACE_8,
  META_KEYBINDING_ACTION_WORKSPACE_9,
  META_KEYBINDING_ACTION_WORKSPACE_10,
  META_KEYBINDING_ACTION_WORKSPACE_11,
  META_KEYBINDING_ACTION_WORKSPACE_12,
  META_KEYBINDING_ACTION_WORKSPACE_LEFT,
  META_KEYBINDING_ACTION_WORKSPACE_RIGHT,
  META_KEYBINDING_ACTION_WORKSPACE_UP,
  META_KEYBINDING_ACTION_WORKSPACE_DOWN,
  META_KEYBINDING_ACTION_SWITCH_GROUP,
  META_KEYBINDING_ACTION_SWITCH_GROUP_BACKWARD,
  META_KEYBINDING_ACTION_SWITCH_WINDOWS,
  META_KEYBINDING_ACTION_SWITCH_WINDOWS_BACKWARD,
  META_KEYBINDING_ACTION_SWITCH_PANELS,
  META_KEYBINDING_ACTION_SWITCH_PANELS_BACKWARD,
  META_KEYBINDING_ACTION_CYCLE_GROUP,
  META_KEYBINDING_ACTION_CYCLE_GROUP_BACKWARD,
  META_KEYBINDING_ACTION_CYCLE_WINDOWS,
  META_KEYBINDING_ACTION_CYCLE_WINDOWS_BACKWARD,
  META_KEYBINDING_ACTION_CYCLE_PANELS,
  META_KEYBINDING_ACTION_CYCLE_PANELS_BACKWARD,
  META_KEYBINDING_ACTION_TAB_POPUP_SELECT,
  META_KEYBINDING_ACTION_TAB_POPUP_CANCEL,
  META_KEYBINDING_ACTION_SHOW_DESKTOP,
  META_KEYBINDING_ACTION_PANEL_RUN_DIALOG,
  META_KEYBINDING_ACTION_TOGGLE_RECORDING,
  META_KEYBINDING_ACTION_SET_SPEW_MARK,
  META_KEYBINDING_ACTION_ACTIVATE_WINDOW_MENU,
  META_KEYBINDING_ACTION_TOGGLE_FULLSCREEN,
  META_KEYBINDING_ACTION_TOGGLE_MAXIMIZED,
  META_KEYBINDING_ACTION_PUSH_TILE_LEFT,
  META_KEYBINDING_ACTION_PUSH_TILE_RIGHT,
  META_KEYBINDING_ACTION_PUSH_TILE_UP,
  META_KEYBINDING_ACTION_PUSH_TILE_DOWN,
  META_KEYBINDING_ACTION_PUSH_SNAP_LEFT,
  META_KEYBINDING_ACTION_PUSH_SNAP_RIGHT,
  META_KEYBINDING_ACTION_PUSH_SNAP_UP,
  META_KEYBINDING_ACTION_PUSH_SNAP_DOWN,
  META_KEYBINDING_ACTION_TOGGLE_ABOVE,
  META_KEYBINDING_ACTION_MAXIMIZE,
  META_KEYBINDING_ACTION_UNMAXIMIZE,
  META_KEYBINDING_ACTION_TOGGLE_SHADED,
  META_KEYBINDING_ACTION_MINIMIZE,
  META_KEYBINDING_ACTION_CLOSE,
  META_KEYBINDING_ACTION_BEGIN_MOVE,
  META_KEYBINDING_ACTION_BEGIN_RESIZE,
  META_KEYBINDING_ACTION_TOGGLE_ON_ALL_WORKSPACES,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_1,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_2,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_3,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_4,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_5,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_6,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_7,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_8,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_9,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_10,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_11,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_12,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_LEFT,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_RIGHT,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_UP,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_DOWN,
  META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_NEW,
  META_KEYBINDING_ACTION_MOVE_TO_MONITOR_LEFT,
  META_KEYBINDING_ACTION_MOVE_TO_MONITOR_RIGHT,
  META_KEYBINDING_ACTION_MOVE_TO_MONITOR_DOWN,
  META_KEYBINDING_ACTION_MOVE_TO_MONITOR_UP,
  META_KEYBINDING_ACTION_RAISE_OR_LOWER,
  META_KEYBINDING_ACTION_RAISE,
  META_KEYBINDING_ACTION_LOWER,
  META_KEYBINDING_ACTION_MAXIMIZE_VERTICALLY,
  META_KEYBINDING_ACTION_MAXIMIZE_HORIZONTALLY,
  META_KEYBINDING_ACTION_MOVE_TO_CORNER_NW,
  META_KEYBINDING_ACTION_MOVE_TO_CORNER_NE,
  META_KEYBINDING_ACTION_MOVE_TO_CORNER_SW,
  META_KEYBINDING_ACTION_MOVE_TO_CORNER_SE,
  META_KEYBINDING_ACTION_MOVE_TO_SIDE_N,
  META_KEYBINDING_ACTION_MOVE_TO_SIDE_S,
  META_KEYBINDING_ACTION_MOVE_TO_SIDE_E,
  META_KEYBINDING_ACTION_MOVE_TO_SIDE_W,
  META_KEYBINDING_ACTION_MOVE_TO_CENTER,
  META_KEYBINDING_ACTION_INCREASE_OPACITY,
  META_KEYBINDING_ACTION_DECREASE_OPACITY,
  META_KEYBINDING_ACTION_CUSTOM,

  META_KEYBINDING_ACTION_LAST
} MetaKeyBindingAction;
</ENUM>
<ENUM>
<NAME>MetaKeyBindingFlags</NAME>
typedef enum
{
  META_KEY_BINDING_NONE,
  META_KEY_BINDING_PER_WINDOW  = 1 << 0,
  META_KEY_BINDING_BUILTIN     = 1 << 1,
  META_KEY_BINDING_REVERSES    = 1 << 2,
  META_KEY_BINDING_IS_REVERSED = 1 << 3
} MetaKeyBindingFlags;
</ENUM>
<USER_FUNCTION>
<NAME>MetaKeyHandlerFunc</NAME>
<RETURNS>void</RETURNS>
MetaDisplay    *display, MetaScreen     *screen, MetaWindow     *window, XEvent         *event, MetaKeyBinding *binding, gpointer        user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>meta_key_binding_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_keybindings</NAME>
<RETURNS>GList *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_keybinding_action</NAME>
<RETURNS>MetaKeyBindingAction</RETURNS>
const char *name
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_window_binding</NAME>
<RETURNS>void</RETURNS>
const char          *name, unsigned int        *keysym, MetaVirtualModifier *modifiers
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_visual_bell</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_bell_is_audible</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_visual_bell_type</NAME>
<RETURNS>CDesktopVisualBellType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_placement_mode</NAME>
<RETURNS>MetaPlacementMode</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_prefs_get_background_transition</NAME>
<RETURNS>MetaBackgroundTransition</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>MetaKeyHandler</NAME>
</STRUCT>
<MACRO>
<NAME>META_TYPE_SCREEN</NAME>
#define META_TYPE_SCREEN            (meta_screen_get_type ())
</MACRO>
<MACRO>
<NAME>META_SCREEN</NAME>
#define META_SCREEN(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_SCREEN, MetaScreen))
</MACRO>
<MACRO>
<NAME>META_SCREEN_CLASS</NAME>
#define META_SCREEN_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  META_TYPE_SCREEN, MetaScreenClass))
</MACRO>
<MACRO>
<NAME>META_IS_SCREEN</NAME>
#define META_IS_SCREEN(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_SCREEN))
</MACRO>
<MACRO>
<NAME>META_IS_SCREEN_CLASS</NAME>
#define META_IS_SCREEN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  META_TYPE_SCREEN))
</MACRO>
<MACRO>
<NAME>META_SCREEN_GET_CLASS</NAME>
#define META_SCREEN_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  META_TYPE_SCREEN, MetaScreenClass))
</MACRO>
<FUNCTION>
<NAME>meta_screen_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_screen_number</NAME>
<RETURNS>int</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_display</NAME>
<RETURNS>MetaDisplay *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_xroot</NAME>
<RETURNS>Window</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_size</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen, int        *width, int        *height
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_for_x_screen</NAME>
<RETURNS>MetaScreen *</RETURNS>
Screen *xscreen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_set_cm_selection</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_unset_cm_selection</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_startup_sequences</NAME>
<RETURNS>GSList *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_workspaces</NAME>
<RETURNS>GList *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_n_workspaces</NAME>
<RETURNS>int</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_workspace_by_index</NAME>
<RETURNS>MetaWorkspace *</RETURNS>
MetaScreen    *screen, int            index
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_remove_workspace</NAME>
<RETURNS>void</RETURNS>
MetaScreen    *screen, MetaWorkspace *workspace, guint32        timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_append_new_workspace</NAME>
<RETURNS>MetaWorkspace *</RETURNS>
MetaScreen    *screen, gboolean       activate, guint32        timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_active_workspace_index</NAME>
<RETURNS>int</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_active_workspace</NAME>
<RETURNS>MetaWorkspace *</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_show_desktop</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen, guint32        timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_toggle_desktop</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen, guint32    timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_unshow_desktop</NAME>
<RETURNS>void</RETURNS>
MetaScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_n_monitors</NAME>
<RETURNS>int</RETURNS>
MetaScreen    *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_primary_monitor</NAME>
<RETURNS>int</RETURNS>
MetaScreen    *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_current_monitor</NAME>
<RETURNS>int</RETURNS>
MetaScreen    *screen
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_monitor_geometry</NAME>
<RETURNS>void</RETURNS>
MetaScreen    *screen, int            monitor, MetaRectangle *geometry
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_monitor_in_fullscreen</NAME>
<RETURNS>gboolean</RETURNS>
MetaScreen  *screen, int          monitor
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_monitor_index_for_rect</NAME>
<RETURNS>int</RETURNS>
MetaScreen    *screen, MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_screen_get_mouse_window</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaScreen *screen, MetaWindow *not_this_one
</FUNCTION>
<ENUM>
<NAME>MetaScreenCorner</NAME>
typedef enum
{
  META_SCREEN_TOPLEFT,
  META_SCREEN_TOPRIGHT,
  META_SCREEN_BOTTOMLEFT,
  META_SCREEN_BOTTOMRIGHT
} MetaScreenCorner;
</ENUM>
<FUNCTION>
<NAME>meta_screen_override_workspace_layout</NAME>
<RETURNS>void</RETURNS>
MetaScreen      *screen, MetaScreenCorner starting_corner, gboolean         vertical_layout, int              n_rows, int              n_columns
</FUNCTION>
<STRUCT>
<NAME>MetaScreenClass</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaCompositor</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaDisplay</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaFrame</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaGroup</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaKeyBinding</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaScreen</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaWindow</NAME>
</STRUCT>
<STRUCT>
<NAME>MetaWorkspace</NAME>
</STRUCT>
<FUNCTION>
<NAME>meta_is_verbose</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_is_debugging</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_is_syncing</NAME>
<RETURNS>gboolean</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_debug_spew_real</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>
<FUNCTION>
<NAME>meta_verbose_real</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>
<FUNCTION>
<NAME>meta_bug</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>
<FUNCTION>
<NAME>meta_warning</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>
<FUNCTION>
<NAME>meta_fatal</NAME>
<RETURNS>void</RETURNS>
const char *format, ...
</FUNCTION>
<ENUM>
<NAME>MetaDebugTopic</NAME>
typedef enum
{
  META_DEBUG_VERBOSE         = -1,
  META_DEBUG_FOCUS           = 1 << 0,
  META_DEBUG_WORKAREA        = 1 << 1,
  META_DEBUG_STACK           = 1 << 2,
  META_DEBUG_THEMES          = 1 << 3,
  META_DEBUG_SM              = 1 << 4,
  META_DEBUG_EVENTS          = 1 << 5,
  META_DEBUG_WINDOW_STATE    = 1 << 6,
  META_DEBUG_WINDOW_OPS      = 1 << 7,
  META_DEBUG_GEOMETRY        = 1 << 8,
  META_DEBUG_PLACEMENT       = 1 << 9,
  META_DEBUG_PING            = 1 << 10,
  META_DEBUG_XINERAMA        = 1 << 11,
  META_DEBUG_KEYBINDINGS     = 1 << 12,
  META_DEBUG_SYNC            = 1 << 13,
  META_DEBUG_ERRORS          = 1 << 14,
  META_DEBUG_STARTUP         = 1 << 15,
  META_DEBUG_PREFS           = 1 << 16,
  META_DEBUG_GROUPS          = 1 << 17,
  META_DEBUG_RESIZING        = 1 << 18,
  META_DEBUG_SHAPES          = 1 << 19,
  META_DEBUG_COMPOSITOR      = 1 << 20,
  META_DEBUG_EDGE_RESISTANCE = 1 << 21
} MetaDebugTopic;
</ENUM>
<FUNCTION>
<NAME>meta_topic_real</NAME>
<RETURNS>void</RETURNS>
MetaDebugTopic topic, const char    *format, ...
</FUNCTION>
<FUNCTION>
<NAME>meta_add_verbose_topic</NAME>
<RETURNS>void</RETURNS>
MetaDebugTopic topic
</FUNCTION>
<FUNCTION>
<NAME>meta_remove_verbose_topic</NAME>
<RETURNS>void</RETURNS>
MetaDebugTopic topic
</FUNCTION>
<FUNCTION>
<NAME>meta_push_no_msg_prefix</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_pop_no_msg_prefix</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_unsigned_long_equal</NAME>
<RETURNS>gint</RETURNS>
gconstpointer v1, gconstpointer v2
</FUNCTION>
<FUNCTION>
<NAME>meta_unsigned_long_hash</NAME>
<RETURNS>guint</RETURNS>
gconstpointer v
</FUNCTION>
<FUNCTION>
<NAME>meta_print_backtrace</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_frame_type_to_string</NAME>
<RETURNS>const char *</RETURNS>
MetaFrameType type
</FUNCTION>
<FUNCTION>
<NAME>meta_gravity_to_string</NAME>
<RETURNS>const char *</RETURNS>
int gravity
</FUNCTION>
<FUNCTION>
<NAME>meta_g_utf8_strndup</NAME>
<RETURNS>char *</RETURNS>
const gchar *src, gsize n
</FUNCTION>
<FUNCTION>
<NAME>meta_free_gslist_and_elements</NAME>
<RETURNS>void</RETURNS>
GSList *list_to_deep_free
</FUNCTION>
<FUNCTION>
<NAME>meta_show_dialog</NAME>
<RETURNS>GPid</RETURNS>
const char *type, const char *message, const char *timeout, const char *display, const char *ok_text, const char *cancel_text, const int transient_for, GSList *columns, GSList *entries
</FUNCTION>
<MACRO>
<NAME>meta_debug_spew</NAME>
#define meta_debug_spew meta_debug_spew_real
</MACRO>
<MACRO>
<NAME>meta_verbose</NAME>
#define meta_verbose    meta_verbose_real
</MACRO>
<MACRO>
<NAME>meta_topic</NAME>
#define meta_topic      meta_topic_real
</MACRO>
<ENUM>
<NAME>MetaLaterType</NAME>
typedef enum {
  META_LATER_RESIZE,
  META_LATER_CALC_SHOWING,
  META_LATER_CHECK_FULLSCREEN,
  META_LATER_SYNC_STACK,
  META_LATER_BEFORE_REDRAW,
  META_LATER_IDLE
} MetaLaterType;
</ENUM>
<FUNCTION>
<NAME>meta_later_add</NAME>
<RETURNS>guint</RETURNS>
MetaLaterType  when, GSourceFunc    func, gpointer       data, GDestroyNotify notify
</FUNCTION>
<FUNCTION>
<NAME>meta_later_remove</NAME>
<RETURNS>void</RETURNS>
guint          later_id
</FUNCTION>
<FUNCTION>
<NAME>meta_pre_exec_close_fds</NAME>
<RETURNS>void</RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>MetaWindowType</NAME>
typedef enum
{
  META_WINDOW_NORMAL,
  META_WINDOW_DESKTOP,
  META_WINDOW_DOCK,
  META_WINDOW_DIALOG,
  META_WINDOW_MODAL_DIALOG,
  META_WINDOW_TOOLBAR,
  META_WINDOW_MENU,
  META_WINDOW_UTILITY,
  META_WINDOW_SPLASHSCREEN,

  /* override redirect window types: */
  META_WINDOW_DROPDOWN_MENU,
  META_WINDOW_POPUP_MENU,
  META_WINDOW_TOOLTIP,
  META_WINDOW_NOTIFICATION,
  META_WINDOW_COMBO,
  META_WINDOW_DND,
  META_WINDOW_OVERRIDE_OTHER
} MetaWindowType;
</ENUM>
<ENUM>
<NAME>MetaMaximizeFlags</NAME>
typedef enum
{
  META_MAXIMIZE_HORIZONTAL = 1 << 0,
  META_MAXIMIZE_VERTICAL   = 1 << 1
} MetaMaximizeFlags;
</ENUM>
<MACRO>
<NAME>META_TYPE_WINDOW</NAME>
#define META_TYPE_WINDOW            (meta_window_get_type ())
</MACRO>
<MACRO>
<NAME>META_WINDOW</NAME>
#define META_WINDOW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_WINDOW, MetaWindow))
</MACRO>
<MACRO>
<NAME>META_WINDOW_CLASS</NAME>
#define META_WINDOW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  META_TYPE_WINDOW, MetaWindowClass))
</MACRO>
<MACRO>
<NAME>META_IS_WINDOW</NAME>
#define META_IS_WINDOW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_WINDOW))
</MACRO>
<MACRO>
<NAME>META_IS_WINDOW_CLASS</NAME>
#define META_IS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  META_TYPE_WINDOW))
</MACRO>
<MACRO>
<NAME>META_WINDOW_GET_CLASS</NAME>
#define META_WINDOW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  META_TYPE_WINDOW, MetaWindowClass))
</MACRO>
<FUNCTION>
<NAME>meta_window_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_frame</NAME>
<RETURNS>MetaFrame *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_has_focus</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_appears_focused</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_shaded</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_override_redirect</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_skip_taskbar</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_interesting</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_rect</NAME>
<RETURNS>MetaRectangle *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_input_rect</NAME>
<RETURNS>void</RETURNS>
const MetaWindow *window, MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_outer_rect</NAME>
<RETURNS>void</RETURNS>
const MetaWindow *window, MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_screen</NAME>
<RETURNS>MetaScreen *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_display</NAME>
<RETURNS>MetaDisplay *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_xwindow</NAME>
<RETURNS>unsigned long</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_window_type</NAME>
<RETURNS>MetaWindowType</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_window_type_atom</NAME>
<RETURNS>Atom</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_workspace</NAME>
<RETURNS>MetaWorkspace *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_monitor</NAME>
<RETURNS>int</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_on_all_workspaces</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_hidden</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_activate</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window,guint32 current_time
</FUNCTION>
<FUNCTION>
<NAME>meta_window_activate_with_workspace</NAME>
<RETURNS>void</RETURNS>
MetaWindow    *window, guint32        current_time, MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_description</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_wm_class</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_wm_class_instance</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_showing_on_its_workspace</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_gtk_application_id</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_gtk_unique_bus_name</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_gtk_application_object_path</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_gtk_window_object_path</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_gtk_app_menu_object_path</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_gtk_menubar_object_path</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_move</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, gboolean user_op, int root_x_nw, int root_y_nw
</FUNCTION>
<FUNCTION>
<NAME>meta_window_move_frame</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, gboolean user_op, int root_x_nw, int root_y_nw
</FUNCTION>
<FUNCTION>
<NAME>meta_window_move_resize_frame</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, gboolean user_op, int root_x_nw, int root_y_nw, int w, int h
</FUNCTION>
<FUNCTION>
<NAME>meta_window_move_to_monitor</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, int monitor
</FUNCTION>
<FUNCTION>
<NAME>meta_window_resize</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, gboolean user_op, int w, int h
</FUNCTION>
<FUNCTION>
<NAME>meta_window_set_demands_attention</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_unset_demands_attention</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_startup_id</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_change_workspace_by_index</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, gint        space_index, gboolean    append, guint32     timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_window_change_workspace</NAME>
<RETURNS>void</RETURNS>
MetaWindow    *window, MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_window_stick</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_unstick</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_compositor_private</NAME>
<RETURNS>GObject *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_set_compositor_private</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, GObject *priv
</FUNCTION>
<FUNCTION>
<NAME>meta_window_configure_notify</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window, XConfigureEvent *event
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_role</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_layer</NAME>
<RETURNS>MetaStackLayer</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_find_root_ancestor</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_ancestor_of_transient</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow            *window, MetaWindow            *transient
</FUNCTION>
<USER_FUNCTION>
<NAME>MetaWindowForeachFunc</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window, void       *data
</USER_FUNCTION>
<FUNCTION>
<NAME>meta_window_foreach_transient</NAME>
<RETURNS>void</RETURNS>
MetaWindow            *window, MetaWindowForeachFunc  func, void                  *user_data
</FUNCTION>
<FUNCTION>
<NAME>meta_window_foreach_ancestor</NAME>
<RETURNS>void</RETURNS>
MetaWindow            *window, MetaWindowForeachFunc  func, void                  *user_data
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_maximized</NAME>
<RETURNS>MetaMaximizeFlags</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_fullscreen</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_monitor_sized</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_on_primary_monitor</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_all_monitors</NAME>
<RETURNS>gint *</RETURNS>
MetaWindow *window, gsize *length
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_demanding_attention</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_urgent</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_requested_bypass_compositor</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_requested_dont_bypass_compositor</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_icon_geometry</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow    *window, MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_window_set_icon_geometry</NAME>
<RETURNS>void</RETURNS>
MetaWindow    *window, MetaRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>meta_window_maximize</NAME>
<RETURNS>void</RETURNS>
MetaWindow        *window, MetaMaximizeFlags  directions
</FUNCTION>
<FUNCTION>
<NAME>meta_window_unmaximize</NAME>
<RETURNS>void</RETURNS>
MetaWindow        *window, MetaMaximizeFlags  directions
</FUNCTION>
<FUNCTION>
<NAME>meta_window_minimize</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_unminimize</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_raise</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_lower</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_reset_opacity</NAME>
<RETURNS>void</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_title</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_transient_for</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_transient_for_as_xid</NAME>
<RETURNS>Window</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_delete</NAME>
<RETURNS>void</RETURNS>
MetaWindow  *window, guint32      timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_stable_sequence</NAME>
<RETURNS>guint</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_user_time</NAME>
<RETURNS>guint32</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_pid</NAME>
<RETURNS>int</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_client_pid</NAME>
<RETURNS>int</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_client_machine</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_remote</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_modal</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_attached_dialog</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_muffin_hints</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_frame_type</NAME>
<RETURNS>MetaFrameType</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_frame_bounds</NAME>
<RETURNS>cairo_region_t *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_tile_match</NAME>
<RETURNS>MetaWindow *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_maximize</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_minimize</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_shade</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_close</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_always_on_all_workspaces</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_is_always_on_top</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_move</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_resize</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_can_tile</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window, MetaTileMode mode
</FUNCTION>
<FUNCTION>
<NAME>meta_window_tile</NAME>
<RETURNS>gboolean</RETURNS>
MetaWindow *window, MetaTileMode mode, gboolean snap
</FUNCTION>
<FUNCTION>
<NAME>meta_window_get_icon_name</NAME>
<RETURNS>const char *</RETURNS>
MetaWindow *window
</FUNCTION>
<FUNCTION>
<NAME>meta_window_create_icon</NAME>
<RETURNS>GdkPixbuf *</RETURNS>
MetaWindow *window, int         size
</FUNCTION>
<STRUCT>
<NAME>MetaWindowClass</NAME>
</STRUCT>
<MACRO>
<NAME>META_TYPE_WORKSPACE</NAME>
#define META_TYPE_WORKSPACE            (meta_workspace_get_type ())
</MACRO>
<MACRO>
<NAME>META_WORKSPACE</NAME>
#define META_WORKSPACE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_WORKSPACE, MetaWorkspace))
</MACRO>
<MACRO>
<NAME>META_WORKSPACE_CLASS</NAME>
#define META_WORKSPACE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  META_TYPE_WORKSPACE, MetaWorkspaceClass))
</MACRO>
<MACRO>
<NAME>META_IS_WORKSPACE</NAME>
#define META_IS_WORKSPACE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_WORKSPACE_TYPE))
</MACRO>
<MACRO>
<NAME>META_IS_WORKSPACE_CLASS</NAME>
#define META_IS_WORKSPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  META_TYPE_WORKSPACE))
</MACRO>
<MACRO>
<NAME>META_WORKSPACE_GET_CLASS</NAME>
#define META_WORKSPACE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  META_TYPE_WORKSPACE, MetaWorkspaceClass))
</MACRO>
<FUNCTION>
<NAME>meta_workspace_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_index</NAME>
<RETURNS>int</RETURNS>
MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_list_windows</NAME>
<RETURNS>GList *</RETURNS>
MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_get_work_area_for_monitor</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace, int            which_monitor, MetaRectangle *area
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_get_work_area_all_monitors</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace, MetaRectangle *area
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_activate</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace, guint32 timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_activate_with_focus</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace, MetaWindow    *focus_this, guint32        timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_activate_with_direction_hint</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace       *workspace, MetaMotionDirection  direction, guint32              timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_update_window_hints</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_set_builtin_struts</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace, GSList        *struts
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_get_neighbor</NAME>
<RETURNS>MetaWorkspace *</RETURNS>
MetaWorkspace      *workspace, MetaMotionDirection direction
</FUNCTION>
<FUNCTION>
<NAME>meta_workspace_focus_default_window</NAME>
<RETURNS>void</RETURNS>
MetaWorkspace *workspace, MetaWindow    *not_this_one, guint32        timestamp
</FUNCTION>
<STRUCT>
<NAME>MetaWorkspaceClass</NAME>
</STRUCT>
<MACRO>
<NAME>METACITY_STOCK_DELETE</NAME>
#define METACITY_STOCK_DELETE   "metacity-delete"
</MACRO>
<MACRO>
<NAME>METACITY_STOCK_MINIMIZE</NAME>
#define METACITY_STOCK_MINIMIZE "metacity-minimize"
</MACRO>
<MACRO>
<NAME>METACITY_STOCK_MAXIMIZE</NAME>
#define METACITY_STOCK_MAXIMIZE "metacity-maximize"
</MACRO>
<STRUCT>
<NAME>MetaWindowMenu</NAME>
struct _MetaWindowMenu
{
  MetaFrames *frames;
  Window client_xwindow;
  GtkWidget *menu;
  MetaWindowMenuFunc func;
  gpointer data;
  MetaMenuOp ops;
  MetaMenuOp insensitive;
};
</STRUCT>
<FUNCTION>
<NAME>meta_window_menu_new</NAME>
<RETURNS>MetaWindowMenu *</RETURNS>
MetaFrames         *frames, MetaMenuOp          ops, MetaMenuOp          insensitive, Window              client_xwindow, unsigned long       active_workspace, int                 n_workspaces, MetaWindowMenuFunc  func, gpointer            data
</FUNCTION>
<FUNCTION>
<NAME>meta_window_menu_popup</NAME>
<RETURNS>void</RETURNS>
MetaWindowMenu     *menu, int                 root_x, int                 root_y, int                 button, guint32             timestamp
</FUNCTION>
<FUNCTION>
<NAME>meta_window_menu_free</NAME>
<RETURNS>void</RETURNS>
MetaWindowMenu     *menu
</FUNCTION>
<MACRO>
<NAME>META_TYPE_ACCEL_LABEL</NAME>
#define META_TYPE_ACCEL_LABEL		(meta_accel_label_get_type ())
</MACRO>
<MACRO>
<NAME>META_ACCEL_LABEL</NAME>
#define META_ACCEL_LABEL(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), META_TYPE_ACCEL_LABEL, MetaAccelLabel))
</MACRO>
<MACRO>
<NAME>META_ACCEL_LABEL_CLASS</NAME>
#define META_ACCEL_LABEL_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), META_TYPE_ACCEL_LABEL, MetaAccelLabelClass))
</MACRO>
<MACRO>
<NAME>META_IS_ACCEL_LABEL</NAME>
#define META_IS_ACCEL_LABEL(obj)	 (G_TYPE_CHECK_INSTANCE_TYPE ((obj), META_TYPE_ACCEL_LABEL))
</MACRO>
<MACRO>
<NAME>META_IS_ACCEL_LABEL_CLASS</NAME>
#define META_IS_ACCEL_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), META_TYPE_ACCEL_LABEL))
</MACRO>
<MACRO>
<NAME>META_ACCEL_LABEL_GET_CLASS</NAME>
#define META_ACCEL_LABEL_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), META_TYPE_ACCEL_LABEL, MetaAccelLabelClass))
</MACRO>
<STRUCT>
<NAME>MetaAccelLabel</NAME>
struct _MetaAccelLabel
{
  GtkLabel label;

  MetaVirtualModifier accel_mods;
  guint accel_key;
  guint accel_padding;
  gchar *accel_string;
  guint16 accel_string_width;
};
</STRUCT>
<STRUCT>
<NAME>MetaAccelLabelClass</NAME>
struct _MetaAccelLabelClass
{
  GtkLabelClass	 parent_class;

  gchar		*signal_quote1;
  gchar		*signal_quote2;
  gchar		*mod_name_shift;
  gchar		*mod_name_control;
  gchar		*mod_name_alt;
  gchar		*mod_name_meta;
  gchar		*mod_name_super;
  gchar		*mod_name_hyper;
  gchar		*mod_name_mod2;
  gchar		*mod_name_mod3;
  gchar		*mod_name_mod4;
  gchar		*mod_name_mod5;
  gchar		*mod_separator;
  gchar		*accel_seperator;
  guint		 latin1_to_char : 1;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>meta_accel_label_get_type</NAME>
<RETURNS>GType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>meta_accel_label_new_with_mnemonic</NAME>
<RETURNS>GtkWidget *</RETURNS>
const gchar            *string
</FUNCTION>
<FUNCTION>
<NAME>meta_accel_label_set_accelerator</NAME>
<RETURNS>void</RETURNS>
MetaAccelLabel         *accel_label, guint                   accelerator_key, MetaVirtualModifier     accelerator_mods
</FUNCTION>
