<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY version "4.6.3">
]>
<refentry id="MetaDisplay">
<refmeta>
<refentrytitle role="top_of_page" id="MetaDisplay.top_of_page">MetaDisplay</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>MUFFIN Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>MetaDisplay</refname>
<refpurpose>Handles operations on an X display.</refpurpose>
</refnamediv>

<refsect1 id="MetaDisplay.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_proto_type" colwidth="150px"/>
<colspec colname="functions_proto_name"/>
<tbody>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="meta-XFree">meta_XFree</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-compositor-version">meta_display_get_compositor_version</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="Display"><returnvalue>Display</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-xdisplay">meta_display_get_xdisplay</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaCompositor"><returnvalue>MetaCompositor</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-compositor">meta_display_get_compositor</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSList"><returnvalue>GSList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-screens">meta_display_get_screens</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-has-shape">meta_display_has_shape</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaScreen"><returnvalue>MetaScreen</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-screen-for-root">meta_display_screen_for_root</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaWindow"><returnvalue>MetaWindow</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-focus-window">meta_display_get_focus_window</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSList"><returnvalue>GSList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-list-windows">meta_display_list_windows</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-xwindow-is-a-no-focus-window">meta_display_xwindow_is_a_no_focus_window</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-damage-event-base">meta_display_get_damage_event_base</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-shape-event-base">meta_display_get_shape_event_base</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-xserver-time-is-before">meta_display_xserver_time_is_before</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint32"><returnvalue>guint32</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-last-user-time">meta_display_get_last_user_time</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint32"><returnvalue>guint32</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-current-time">meta_display_get_current_time</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="guint32"><returnvalue>guint32</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-current-time-roundtrip">meta_display_get_current_time_roundtrip</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-ignored-modifier-mask">meta_display_get_ignored_modifier_mask</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-tab-list">meta_display_get_tab_list</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaWindow"><returnvalue>MetaWindow</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-tab-next">meta_display_get_tab_next</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaWindow"><returnvalue>MetaWindow</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-get-tab-current">meta_display_get_tab_current</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-begin-grab-op">meta_display_begin_grab_op</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-end-grab-op">meta_display_end_grab_op</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaGrabOp"><returnvalue>MetaGrabOp</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-grab-op">meta_display_get_grab_op</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-add-keybinding">meta_display_add_keybinding</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-remove-keybinding">meta_display_remove_keybinding</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-rebuild-keybindings">meta_display_rebuild_keybindings</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-add-custom-keybinding">meta_display_add_custom_keybinding</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-remove-custom-keybinding">meta_display_remove_custom_keybinding</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="MetaKeyBindingAction"><returnvalue>MetaKeyBindingAction</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-keybinding-action">meta_display_get_keybinding_action</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-set-input-focus-window">meta_display_set_input_focus_window</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-focus-the-no-focus-window">meta_display_focus_the_no_focus_window</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="GSList"><returnvalue>GSList</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="meta-display-sort-windows-by-stacking">meta_display_sort_windows_by_stacking</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="Window"><returnvalue>Window</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-get-leader-window">meta_display_get_leader_window</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-add-ignored-crossing-serial">meta_display_add_ignored_crossing_serial</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-unmanage-screen">meta_display_unmanage_screen</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-keybinding-action-invoke-by-code">meta_display_keybinding_action_invoke_by_code</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="meta-display-restart">meta_display_restart</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="MetaDisplay.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="other_proto_type" colwidth="150px"/>
<colspec colname="other_proto_name"/>
<tbody>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="MetaTabList">MetaTabList</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="MetaTabShowType">MetaTabShowType</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="MetaListWindowsFlags">MetaListWindowsFlags</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="MetaDisplay.description" role="desc">
<title role="desc.title">Description</title>
<para>The display is represented as a MetaDisplay struct.</para>

</refsect1>
<refsect1 id="MetaDisplay.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="meta-XFree" role="macro">
<title>meta_XFree()</title>
<indexterm zone="meta-XFree"><primary>meta_XFree</primary></indexterm>
<programlisting language="C">#define meta_XFree(p) do { if ((p)) XFree ((p)); } while (0)
</programlisting>
</refsect2>
<refsect2 id="meta-display-get-compositor-version" role="function">
<title>meta_display_get_compositor_version&#160;()</title>
<indexterm zone="meta-display-get-compositor-version"><primary>meta_display_get_compositor_version</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_get_compositor_version (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                     <parameter><link linkend="int"><type>int</type></link> *major</parameter>,
                                     <parameter><link linkend="int"><type>int</type></link> *minor</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-get-xdisplay" role="function">
<title>meta_display_get_xdisplay&#160;()</title>
<indexterm zone="meta-display-get-xdisplay"><primary>meta_display_get_xdisplay</primary></indexterm>
<programlisting language="C"><link linkend="Display"><returnvalue>Display</returnvalue></link>&#160;*
meta_display_get_xdisplay (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para></refsect2>
<refsect2 id="meta-display-get-compositor" role="function">
<title>meta_display_get_compositor&#160;()</title>
<indexterm zone="meta-display-get-compositor"><primary>meta_display_get_compositor</primary></indexterm>
<programlisting language="C"><link linkend="MetaCompositor"><returnvalue>MetaCompositor</returnvalue></link>&#160;*
meta_display_get_compositor (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>

<para><emphasis role="annotation">[<acronym>skip</acronym>]</emphasis></para></refsect2>
<refsect2 id="meta-display-get-screens" role="function">
<title>meta_display_get_screens&#160;()</title>
<indexterm zone="meta-display-get-screens"><primary>meta_display_get_screens</primary></indexterm>
<programlisting language="C"><link linkend="GSList"><returnvalue>GSList</returnvalue></link>&#160;*
meta_display_get_screens (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<refsect3 id="meta-display-get-screens.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-screens.returns" role="returns">
<title>Returns</title>
<para>Screens for this display. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>][<acronym>element-type</acronym> Meta.Screen]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-has-shape" role="function">
<title>meta_display_has_shape&#160;()</title>
<indexterm zone="meta-display-has-shape"><primary>meta_display_has_shape</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_has_shape (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-screen-for-root" role="function">
<title>meta_display_screen_for_root&#160;()</title>
<indexterm zone="meta-display-screen-for-root"><primary>meta_display_screen_for_root</primary></indexterm>
<programlisting language="C"><link linkend="MetaScreen"><returnvalue>MetaScreen</returnvalue></link>&#160;*
meta_display_screen_for_root (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                              <parameter><link linkend="Window"><type>Window</type></link> xroot</parameter>);</programlisting>
<para>Return the <link linkend="MetaScreen"><type>MetaScreen</type></link> corresponding to a specified X root window ID.</para>
<refsect3 id="meta-display-screen-for-root.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-screen-for-root.returns" role="returns">
<title>Returns</title>
<para>the screen for the specified root window ID, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-focus-window" role="function">
<title>meta_display_get_focus_window&#160;()</title>
<indexterm zone="meta-display-get-focus-window"><primary>meta_display_get_focus_window</primary></indexterm>
<programlisting language="C"><link linkend="MetaWindow"><returnvalue>MetaWindow</returnvalue></link>&#160;*
meta_display_get_focus_window (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<para>Get the window that, according to events received from X server,
currently has the input focus. We may have already sent a request
to the X server to move the focus window elsewhere. (The
expected_focus_window records where we've last set the input
focus.)</para>
<refsect3 id="meta-display-get-focus-window.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-focus-window.returns" role="returns">
<title>Returns</title>
<para>The current focus window. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-list-windows" role="function">
<title>meta_display_list_windows&#160;()</title>
<indexterm zone="meta-display-list-windows"><primary>meta_display_list_windows</primary></indexterm>
<programlisting language="C"><link linkend="GSList"><returnvalue>GSList</returnvalue></link>&#160;*
meta_display_list_windows (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                           <parameter><link linkend="MetaListWindowsFlags"><type>MetaListWindowsFlags</type></link> flags</parameter>);</programlisting>
<para>Lists windows for the display, the <parameter>flags</parameter>
 parameter for
now determines whether override-redirect windows will be
included.</para>
<refsect3 id="meta-display-list-windows.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>options for listing</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-list-windows.returns" role="returns">
<title>Returns</title>
<para>the list of windows. </para>
<para><emphasis role="annotation">[<acronym>transfer container</acronym>][<acronym>element-type</acronym> MetaWindow]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-xwindow-is-a-no-focus-window" role="function">
<title>meta_display_xwindow_is_a_no_focus_window&#160;()</title>
<indexterm zone="meta-display-xwindow-is-a-no-focus-window"><primary>meta_display_xwindow_is_a_no_focus_window</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_xwindow_is_a_no_focus_window
                               (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                <parameter><link linkend="Window"><type>Window</type></link> xwindow</parameter>);</programlisting>
<para>Returns <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> iff window is one of muffin's internal "no focus" windows
(there is one per screen) which will have the focus when there is no
actual client window focused.</para>
<refsect3 id="meta-display-xwindow-is-a-no-focus-window.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>A <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>xwindow</para></entry>
<entry role="parameter_description"><para>An X11 window</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="meta-display-get-damage-event-base" role="function">
<title>meta_display_get_damage_event_base&#160;()</title>
<indexterm zone="meta-display-get-damage-event-base"><primary>meta_display_get_damage_event_base</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
meta_display_get_damage_event_base (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-get-shape-event-base" role="function">
<title>meta_display_get_shape_event_base&#160;()</title>
<indexterm zone="meta-display-get-shape-event-base"><primary>meta_display_get_shape_event_base</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
meta_display_get_shape_event_base (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-xserver-time-is-before" role="function">
<title>meta_display_xserver_time_is_before&#160;()</title>
<indexterm zone="meta-display-xserver-time-is-before"><primary>meta_display_xserver_time_is_before</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_xserver_time_is_before (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                     <parameter><link linkend="guint32"><type>guint32</type></link> time1</parameter>,
                                     <parameter><link linkend="guint32"><type>guint32</type></link> time2</parameter>);</programlisting>
<para>Xserver time can wraparound, thus comparing two timestamps needs to take
this into account. If no wraparound has occurred, this is equivalent to
  time1 &lt; time2
Otherwise, we need to account for the fact that wraparound can occur
and the fact that a timestamp of 0 must be special-cased since it
means "older than anything else".</para>
<para>Note that this is NOT an equivalent for time1 &lt;= time2; if that's what
you need then you'll need to swap the order of the arguments and negate
the result.</para>
<refsect3 id="meta-display-xserver-time-is-before.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>time1</para></entry>
<entry role="parameter_description"><para>An event timestamp</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>time2</para></entry>
<entry role="parameter_description"><para>An event timestamp</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="meta-display-get-last-user-time" role="function">
<title>meta_display_get_last_user_time&#160;()</title>
<indexterm zone="meta-display-get-last-user-time"><primary>meta_display_get_last_user_time</primary></indexterm>
<programlisting language="C"><link linkend="guint32"><returnvalue>guint32</returnvalue></link>
meta_display_get_last_user_time (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<refsect3 id="meta-display-get-last-user-time.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-last-user-time.returns" role="returns">
<title>Returns</title>
<para> Timestamp of the last user interaction event with a window</para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-current-time" role="function">
<title>meta_display_get_current_time&#160;()</title>
<indexterm zone="meta-display-get-current-time"><primary>meta_display_get_current_time</primary></indexterm>
<programlisting language="C"><link linkend="guint32"><returnvalue>guint32</returnvalue></link>
meta_display_get_current_time (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-get-current-time-roundtrip" role="function">
<title>meta_display_get_current_time_roundtrip&#160;()</title>
<indexterm zone="meta-display-get-current-time-roundtrip"><primary>meta_display_get_current_time_roundtrip</primary></indexterm>
<programlisting language="C"><link linkend="guint32"><returnvalue>guint32</returnvalue></link>
meta_display_get_current_time_roundtrip
                               (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-get-ignored-modifier-mask" role="function">
<title>meta_display_get_ignored_modifier_mask&#160;()</title>
<indexterm zone="meta-display-get-ignored-modifier-mask"><primary>meta_display_get_ignored_modifier_mask</primary></indexterm>
<programlisting language="C">unsigned <link linkend="int"><returnvalue>int</returnvalue></link>
meta_display_get_ignored_modifier_mask
                               (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<refsect3 id="meta-display-get-ignored-modifier-mask.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-ignored-modifier-mask.returns" role="returns">
<title>Returns</title>
<para> a mask of modifiers that should be ignored
when matching keybindings to events</para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-tab-list" role="function">
<title>meta_display_get_tab_list&#160;()</title>
<indexterm zone="meta-display-get-tab-list"><primary>meta_display_get_tab_list</primary></indexterm>
<programlisting language="C"><link linkend="GList"><returnvalue>GList</returnvalue></link>&#160;*
meta_display_get_tab_list (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                           <parameter><link linkend="MetaTabList"><type>MetaTabList</type></link> type</parameter>,
                           <parameter><link linkend="MetaScreen"><type>MetaScreen</type></link> *screen</parameter>,
                           <parameter><link linkend="MetaWorkspace"><type>MetaWorkspace</type></link> *workspace</parameter>);</programlisting>
<para>Determine the list of windows that should be displayed for Alt-TAB
functionality.  The windows are returned in most recently used order.</para>
<refsect3 id="meta-display-get-tab-list.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>type of tab list</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>screen</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaScreen"><type>MetaScreen</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>workspace</para></entry>
<entry role="parameter_description"><para>origin workspace</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-tab-list.returns" role="returns">
<title>Returns</title>
<para>List of windows. </para>
<para><emphasis role="annotation">[<acronym>transfer container</acronym>][<acronym>element-type</acronym> Meta.Window]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-tab-next" role="function">
<title>meta_display_get_tab_next&#160;()</title>
<indexterm zone="meta-display-get-tab-next"><primary>meta_display_get_tab_next</primary></indexterm>
<programlisting language="C"><link linkend="MetaWindow"><returnvalue>MetaWindow</returnvalue></link>&#160;*
meta_display_get_tab_next (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                           <parameter><link linkend="MetaTabList"><type>MetaTabList</type></link> type</parameter>,
                           <parameter><link linkend="MetaScreen"><type>MetaScreen</type></link> *screen</parameter>,
                           <parameter><link linkend="MetaWorkspace"><type>MetaWorkspace</type></link> *workspace</parameter>,
                           <parameter><link linkend="MetaWindow"><type>MetaWindow</type></link> *window</parameter>,
                           <parameter><link linkend="gboolean"><type>gboolean</type></link> backward</parameter>);</programlisting>
<para>Determine the next window that should be displayed for Alt-TAB
functionality.</para>
<refsect3 id="meta-display-get-tab-next.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>type of tab list</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>screen</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaScreen"><type>MetaScreen</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>workspace</para></entry>
<entry role="parameter_description"><para>origin workspace</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>window</para></entry>
<entry role="parameter_description"><para>starting window. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>]</emphasis></entry></row>
<row><entry role="parameter_name"><para>backward</para></entry>
<entry role="parameter_description"><para>If <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, look for the previous window.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-tab-next.returns" role="returns">
<title>Returns</title>
<para>Next window. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-tab-current" role="function">
<title>meta_display_get_tab_current&#160;()</title>
<indexterm zone="meta-display-get-tab-current"><primary>meta_display_get_tab_current</primary></indexterm>
<programlisting language="C"><link linkend="MetaWindow"><returnvalue>MetaWindow</returnvalue></link>&#160;*
meta_display_get_tab_current (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                              <parameter><link linkend="MetaTabList"><type>MetaTabList</type></link> type</parameter>,
                              <parameter><link linkend="MetaScreen"><type>MetaScreen</type></link> *screen</parameter>,
                              <parameter><link linkend="MetaWorkspace"><type>MetaWorkspace</type></link> *workspace</parameter>);</programlisting>
<para>Determine the active window that should be displayed for Alt-TAB.</para>
<refsect3 id="meta-display-get-tab-current.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>type of tab list</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>screen</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaScreen"><type>MetaScreen</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>workspace</para></entry>
<entry role="parameter_description"><para>origin workspace</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-tab-current.returns" role="returns">
<title>Returns</title>
<para>Current window. </para>
<para><emphasis role="annotation">[<acronym>transfer none</acronym>]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-begin-grab-op" role="function">
<title>meta_display_begin_grab_op&#160;()</title>
<indexterm zone="meta-display-begin-grab-op"><primary>meta_display_begin_grab_op</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_begin_grab_op (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                            <parameter><link linkend="MetaScreen"><type>MetaScreen</type></link> *screen</parameter>,
                            <parameter><link linkend="MetaWindow"><type>MetaWindow</type></link> *window</parameter>,
                            <parameter><link linkend="MetaGrabOp"><type>MetaGrabOp</type></link> op</parameter>,
                            <parameter><link linkend="gboolean"><type>gboolean</type></link> pointer_already_grabbed</parameter>,
                            <parameter><link linkend="gboolean"><type>gboolean</type></link> frame_action</parameter>,
                            <parameter><link linkend="int"><type>int</type></link> button</parameter>,
                            <parameter><link linkend="gulong"><type>gulong</type></link> modmask</parameter>,
                            <parameter><link linkend="guint32"><type>guint32</type></link> timestamp</parameter>,
                            <parameter><link linkend="int"><type>int</type></link> root_x</parameter>,
                            <parameter><link linkend="int"><type>int</type></link> root_y</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-end-grab-op" role="function">
<title>meta_display_end_grab_op&#160;()</title>
<indexterm zone="meta-display-end-grab-op"><primary>meta_display_end_grab_op</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_end_grab_op (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                          <parameter><link linkend="guint32"><type>guint32</type></link> timestamp</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-get-grab-op" role="function">
<title>meta_display_get_grab_op&#160;()</title>
<indexterm zone="meta-display-get-grab-op"><primary>meta_display_get_grab_op</primary></indexterm>
<programlisting language="C"><link linkend="MetaGrabOp"><returnvalue>MetaGrabOp</returnvalue></link>
meta_display_get_grab_op (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<refsect3 id="meta-display-get-grab-op.returns" role="returns">
<title>Returns</title>
<para> the current grab operation, or <link linkend="META-GRAB-OP-NONE:CAPS"><literal>META_GRAB_OP_NONE</literal></link> if
Muffin doesn't currently have a grab. <link linkend="META-GRAB-OP-COMPOSITOR:CAPS"><literal>META_GRAB_OP_COMPOSITOR</literal></link> will
be returned if a compositor-plugin modal operation is in effect
(See <link linkend="muffin-begin-modal-for-plugin"><function>muffin_begin_modal_for_plugin()</function></link>)</para>
</refsect3></refsect2>
<refsect2 id="meta-display-add-keybinding" role="function">
<title>meta_display_add_keybinding&#160;()</title>
<indexterm zone="meta-display-add-keybinding"><primary>meta_display_add_keybinding</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_add_keybinding (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                             <parameter>const <link linkend="char"><type>char</type></link> *schema</parameter>,
                             <parameter><link linkend="MetaKeyBindingFlags"><type>MetaKeyBindingFlags</type></link> flags</parameter>,
                             <parameter><link linkend="MetaKeyHandlerFunc"><type>MetaKeyHandlerFunc</type></link> handler</parameter>,
                             <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                             <parameter><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> free_data</parameter>);</programlisting>
<para>Add a keybinding at runtime. The key <parameter>name</parameter>
 in <parameter>schema</parameter>
 needs to be of type
<link linkend="G-VARIANT-TYPE-STRING-ARRAY:CAPS"><literal>G_VARIANT_TYPE_STRING_ARRAY</literal></link>, with each string describing a keybinding in
the form of "&lt;Control&gt;a" or "&lt;Shift&gt;&lt;Alt&gt;F1". The parser
is fairly liberal and allows lower or upper case, and also abbreviations
such as "&lt;Ctl&gt;" and "&lt;Ctrl&gt;". If the key is set to the empty
list or a list with a single element of either "" or "disabled", the
keybinding is disabled.  If <link linkend="META-KEY-BINDING-REVERSES:CAPS"><literal>META_KEY_BINDING_REVERSES</literal></link> is specified in
<parameter>flags</parameter>
, the binding may be reversed by holding down the "shift" key;
therefore, "&lt;Shift&gt;"
cannot be one of the keys used. <parameter>handler</parameter>
 is expected to check for the
"shift" modifier in this case and reverse its action.</para>
<para>Use <link linkend="meta-display-remove-keybinding"><function>meta_display_remove_keybinding()</function></link> to remove the binding.</para>
<refsect3 id="meta-display-add-keybinding.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the binding's name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>schema</para></entry>
<entry role="parameter_description"><para>the <link linkend="GSettings"><type>GSettings</type></link> schema where <parameter>name</parameter>
is stored</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>flags</para></entry>
<entry role="parameter_description"><para>flags to specify binding details</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>handler</para></entry>
<entry role="parameter_description"><para>function to run when the keybinding is invoked</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to <parameter>handler</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>free_data</para></entry>
<entry role="parameter_description"><para>function to free <parameter>user_data</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-add-keybinding.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the keybinding was added successfully,
otherwise <link linkend="FALSE:CAPS"><literal>FALSE</literal></link></para>
</refsect3></refsect2>
<refsect2 id="meta-display-remove-keybinding" role="function">
<title>meta_display_remove_keybinding&#160;()</title>
<indexterm zone="meta-display-remove-keybinding"><primary>meta_display_remove_keybinding</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_remove_keybinding (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>Remove keybinding <parameter>name</parameter>
; the function will fail if <parameter>name</parameter>
 is not a known
keybinding or has not been added with <link linkend="meta-display-add-keybinding"><function>meta_display_add_keybinding()</function></link>.</para>
<refsect3 id="meta-display-remove-keybinding.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>the <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>name of the keybinding to remove</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-remove-keybinding.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the binding has been removed sucessfully,
otherwise <link linkend="FALSE:CAPS"><literal>FALSE</literal></link></para>
</refsect3></refsect2>
<refsect2 id="meta-display-rebuild-keybindings" role="function">
<title>meta_display_rebuild_keybindings&#160;()</title>
<indexterm zone="meta-display-rebuild-keybindings"><primary>meta_display_rebuild_keybindings</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_rebuild_keybindings (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<para>Rebuild all keybindings (typically done after adding, removing, or changing
one or more keybindings)</para>
<refsect3 id="meta-display-rebuild-keybindings.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>the <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="meta-display-add-custom-keybinding" role="function">
<title>meta_display_add_custom_keybinding&#160;()</title>
<indexterm zone="meta-display-add-custom-keybinding"><primary>meta_display_add_custom_keybinding</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_add_custom_keybinding (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                    <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                    <parameter>const <link linkend="char"><type>char</type></link> **bindings</parameter>,
                                    <parameter><link linkend="MetaKeyHandlerFunc"><type>MetaKeyHandlerFunc</type></link> callback</parameter>,
                                    <parameter><link linkend="gpointer"><type>gpointer</type></link> user_data</parameter>,
                                    <parameter><link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> free_data</parameter>);</programlisting>
<para>Use <link linkend="meta-display-remove-custom-keybinding"><function>meta_display_remove_custom_keybinding()</function></link> to remove the binding.</para>
<refsect3 id="meta-display-add-custom-keybinding.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the binding's unique name</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bindings</para></entry>
<entry role="parameter_description"><para>array of parseable keystrokes. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>allow-none</acronym>][<acronym>array</acronym> zero-terminated=1]</emphasis></entry></row>
<row><entry role="parameter_name"><para>callback</para></entry>
<entry role="parameter_description"><para>function to run when the keybinding is invoked</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>user_data</para></entry>
<entry role="parameter_description"><para>the data to pass to <parameter>handler</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>free_data</para></entry>
<entry role="parameter_description"><para>function to free <parameter>user_data</parameter>
</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-add-custom-keybinding.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the keybinding was added successfully,
otherwise <link linkend="FALSE:CAPS"><literal>FALSE</literal></link></para>
</refsect3></refsect2>
<refsect2 id="meta-display-remove-custom-keybinding" role="function">
<title>meta_display_remove_custom_keybinding&#160;()</title>
<indexterm zone="meta-display-remove-custom-keybinding"><primary>meta_display_remove_custom_keybinding</primary></indexterm>
<programlisting language="C"><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>
meta_display_remove_custom_keybinding (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                       <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>Remove keybinding <parameter>name</parameter>
; the function will fail if <parameter>name</parameter>
 is not a known
keybinding or has not been added with <link linkend="meta-display-add-custom-keybinding"><function>meta_display_add_custom_keybinding()</function></link>.</para>
<refsect3 id="meta-display-remove-custom-keybinding.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>the <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>name of the keybinding to remove</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-remove-custom-keybinding.returns" role="returns">
<title>Returns</title>
<para> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the binding has been removed sucessfully,
otherwise <link linkend="FALSE:CAPS"><literal>FALSE</literal></link></para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-keybinding-action" role="function">
<title>meta_display_get_keybinding_action&#160;()</title>
<indexterm zone="meta-display-get-keybinding-action"><primary>meta_display_get_keybinding_action</primary></indexterm>
<programlisting language="C"><link linkend="MetaKeyBindingAction"><returnvalue>MetaKeyBindingAction</returnvalue></link>
meta_display_get_keybinding_action (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                    <parameter>unsigned <link linkend="int"><type>int</type></link> keycode</parameter>,
                                    <parameter><type>unsigned long </type> mask</parameter>);</programlisting>
<para>Get the <link linkend="MetaKeyBindingAction"><type>MetaKeyBindingAction</type></link> bound to <link linkend="keycode"><literal>keycode</literal></link>. Only builtin
keybindings have an associated <link linkend="MetaKeyBindingAction"><type>MetaKeyBindingAction</type></link>, for
bindings added dynamically with <link linkend="meta-display-add-keybinding"><function>meta_display_add_keybinding()</function></link>
the function will always return <link linkend="META-KEYBINDING-ACTION-NONE:CAPS"><literal>META_KEYBINDING_ACTION_NONE</literal></link>.</para>
<refsect3 id="meta-display-get-keybinding-action.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>A <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keycode</para></entry>
<entry role="parameter_description"><para>Raw keycode</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>Event mask</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-keybinding-action.returns" role="returns">
<title>Returns</title>
<para> The action that should be taken for the given key, or
<link linkend="META-KEYBINDING-ACTION-NONE:CAPS"><literal>META_KEYBINDING_ACTION_NONE</literal></link>.</para>
</refsect3></refsect2>
<refsect2 id="meta-display-set-input-focus-window" role="function">
<title>meta_display_set_input_focus_window&#160;()</title>
<indexterm zone="meta-display-set-input-focus-window"><primary>meta_display_set_input_focus_window</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_set_input_focus_window (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                     <parameter><link linkend="MetaWindow"><type>MetaWindow</type></link> *window</parameter>,
                                     <parameter><link linkend="gboolean"><type>gboolean</type></link> focus_frame</parameter>,
                                     <parameter><link linkend="guint32"><type>guint32</type></link> timestamp</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-focus-the-no-focus-window" role="function">
<title>meta_display_focus_the_no_focus_window&#160;()</title>
<indexterm zone="meta-display-focus-the-no-focus-window"><primary>meta_display_focus_the_no_focus_window</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_focus_the_no_focus_window
                               (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                <parameter><link linkend="MetaScreen"><type>MetaScreen</type></link> *screen</parameter>,
                                <parameter><link linkend="guint32"><type>guint32</type></link> timestamp</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-sort-windows-by-stacking" role="function">
<title>meta_display_sort_windows_by_stacking&#160;()</title>
<indexterm zone="meta-display-sort-windows-by-stacking"><primary>meta_display_sort_windows_by_stacking</primary></indexterm>
<programlisting language="C"><link linkend="GSList"><returnvalue>GSList</returnvalue></link>&#160;*
meta_display_sort_windows_by_stacking (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                       <parameter><link linkend="GSList"><type>GSList</type></link> *windows</parameter>);</programlisting>
<para>Sorts a set of windows according to their current stacking order. If windows
from multiple screens are present in the set of input windows, then all the
windows on screen 0 are sorted below all the windows on screen 1, and so forth.
Since the stacking order of override-redirect windows isn't controlled by
Metacity, if override-redirect windows are in the input, the result may not
correspond to the actual stacking order in the X server.</para>
<para>An example of using this would be to sort the list of transient dialogs for a
window into their current stacking order.</para>
<refsect3 id="meta-display-sort-windows-by-stacking.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>windows</para></entry>
<entry role="parameter_description"><para>Set of windows. </para></entry>
<entry role="parameter_annotations"><emphasis role="annotation">[<acronym>element-type</acronym> MetaWindow]</emphasis></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-sort-windows-by-stacking.returns" role="returns">
<title>Returns</title>
<para>Input windows sorted by stacking order, from lowest to highest. </para>
<para><emphasis role="annotation">[<acronym>transfer container</acronym>][<acronym>element-type</acronym> MetaWindow]</emphasis></para>
</refsect3></refsect2>
<refsect2 id="meta-display-get-leader-window" role="function">
<title>meta_display_get_leader_window&#160;()</title>
<indexterm zone="meta-display-get-leader-window"><primary>meta_display_get_leader_window</primary></indexterm>
<programlisting language="C"><link linkend="Window"><returnvalue>Window</returnvalue></link>
meta_display_get_leader_window (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<para>Returns the window manager's leader window (as defined by the
_NET_SUPPORTING_WM_CHECK mechanism of EWMH). For use by plugins that wish
to attach additional custom properties to this window.</para>
<refsect3 id="meta-display-get-leader-window.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 id="meta-display-get-leader-window.returns" role="returns">
<title>Returns</title>
<para> xid of the leader window.</para>
</refsect3></refsect2>
<refsect2 id="meta-display-add-ignored-crossing-serial" role="function">
<title>meta_display_add_ignored_crossing_serial&#160;()</title>
<indexterm zone="meta-display-add-ignored-crossing-serial"><primary>meta_display_add_ignored_crossing_serial</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_add_ignored_crossing_serial
                               (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                <parameter><type>unsigned long </type> serial</parameter>);</programlisting>
<para>Save the specified serial and ignore crossing events with that
serial for the purpose of focus-follows-mouse. This can be used
for certain changes to the window hierarchy that we don't want
to change the focus window, even if they cause the pointer to
end up in a new window.</para>
<refsect3 id="meta-display-add-ignored-crossing-serial.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>serial</para></entry>
<entry role="parameter_description"><para>the serial to ignore</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="meta-display-unmanage-screen" role="function">
<title>meta_display_unmanage_screen&#160;()</title>
<indexterm zone="meta-display-unmanage-screen"><primary>meta_display_unmanage_screen</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_unmanage_screen (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                              <parameter><link linkend="MetaScreen"><type>MetaScreen</type></link> *screen</parameter>,
                              <parameter><link linkend="guint32"><type>guint32</type></link> timestamp</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-keybinding-action-invoke-by-code" role="function">
<title>meta_display_keybinding_action_invoke_by_code&#160;()</title>
<indexterm zone="meta-display-keybinding-action-invoke-by-code"><primary>meta_display_keybinding_action_invoke_by_code</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_keybinding_action_invoke_by_code
                               (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>,
                                <parameter>unsigned <link linkend="int"><type>int</type></link> keycode</parameter>,
                                <parameter><type>unsigned long </type> mask</parameter>);</programlisting>
</refsect2>
<refsect2 id="meta-display-restart" role="function">
<title>meta_display_restart&#160;()</title>
<indexterm zone="meta-display-restart"><primary>meta_display_restart</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
meta_display_restart (<parameter><link linkend="MetaDisplay"><type>MetaDisplay</type></link> *display</parameter>);</programlisting>
<para>Restart the current process.  Only intended for development purposes.</para>
<refsect3 id="meta-display-restart.parameters" role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>display</para></entry>
<entry role="parameter_description"><para>a <link linkend="MetaDisplay"><type>MetaDisplay</type></link></para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="MetaDisplay.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="MetaTabList" role="enum">
<title>enum MetaTabList</title>
<indexterm zone="MetaTabList"><primary>MetaTabList</primary></indexterm>
<refsect3 id="MetaTabList.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="META-TAB-LIST-NORMAL:CAPS">META_TAB_LIST_NORMAL</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="META-TAB-LIST-DOCKS:CAPS">META_TAB_LIST_DOCKS</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="META-TAB-LIST-GROUP:CAPS">META_TAB_LIST_GROUP</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="META-TAB-LIST-NORMAL-ALL:CAPS">META_TAB_LIST_NORMAL_ALL</para></entry>
<entry /><entry />
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="MetaTabShowType" role="enum">
<title>enum MetaTabShowType</title>
<indexterm zone="MetaTabShowType"><primary>MetaTabShowType</primary></indexterm>
<refsect3 id="MetaTabShowType.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="META-TAB-SHOW-ICON:CAPS">META_TAB_SHOW_ICON</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="META-TAB-SHOW-INSTANTLY:CAPS">META_TAB_SHOW_INSTANTLY</para></entry>
<entry /><entry />
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="MetaListWindowsFlags" role="enum">
<title>enum MetaListWindowsFlags</title>
<indexterm zone="MetaListWindowsFlags"><primary>MetaListWindowsFlags</primary></indexterm>
<refsect3 id="MetaListWindowsFlags.members" role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="META-LIST-DEFAULT:CAPS">META_LIST_DEFAULT</para></entry>
<entry /><entry />
</row>
<row role="constant"><entry role="enum_member_name"><para id="META-LIST-INCLUDE-OVERRIDE-REDIRECT:CAPS">META_LIST_INCLUDE_OVERRIDE_REDIRECT</para></entry>
<entry /><entry />
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>

</refentry>
